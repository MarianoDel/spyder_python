!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AAPL_EVM	EVM_from_quantinsti.py	/^AAPL_EVM = EVM(data, n)$/;"	v
AAPL_ForceIndex	ForceI_from_quantinsti.py	/^AAPL_ForceIndex = ForceIndex(data,n)$/;"	v
Alpha	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^Alpha = 3.3 \/ 350.$/;"	v
BBANDS	Bollinger_from_quantinsti.py	/^def BBANDS(data, ndays):$/;"	f
Beta	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^Beta = 350.\/3.3$/;"	v
C	temp.py	/^C = np.array (cval)$/;"	v
CCI	CCI_from_quantinsti.py	/^CCI = NIFTY_CCI['CCI']$/;"	v
CCI	CCI_from_quantinsti.py	/^def CCI(data, ndays): $/;"	f
CT	algos/Tfilter_sympy_01.py	/^CT = 220e-9$/;"	v
Cm	algos/saw_01.py	/^Cm = 1.5e-12$/;"	v
Cm	algos/saw_02.py	/^Cm = 1.5e-12$/;"	v
Cm	algos/saw_03.py	/^Cm = 1.685e-15$/;"	v
Cp	algos/saw_01.py	/^Cp = 1.9e-12$/;"	v
Cp	algos/saw_02.py	/^Cp = 1.9e-12$/;"	v
Cp	algos/saw_03.py	/^Cp = 2.3e-12$/;"	v
D	algos/PID_control_01.py	/^D = (kp * s + ki + (s**2 * kd) \/ (1 + s*Tf)) \/ s$/;"	v
D	algos/PID_control_02.py	/^D = (kp * s + ki + s**2 * kd) \/ s$/;"	v
D	algos/pole_zero_placement_02.py	/^D = num \/ den$/;"	v
D	algos/pole_zero_placement_03.py	/^D = num \/ den$/;"	v
DAX	algos/pandas_test_02.py	/^DAX = web.DataReader(name = '^GDAXI', data_source = 'yahoo', start='2000-1-1')$/;"	v
E	algos/PID_control_01.py	/^E = signal.lti(Enum, Eden)$/;"	v
E	algos/PID_control_01.py	/^E = simplify(D)$/;"	v
EVM	EVM_from_quantinsti.py	/^EVM = AAPL_EVM['EVM']$/;"	v
EVM	EVM_from_quantinsti.py	/^def EVM(data, ndays): $/;"	f
EWMA	MA_from_quantinsti.py	/^EWMA = EWMA_NIFTY['EWMA_200']$/;"	v
EWMA	MA_from_quantinsti.py	/^def EWMA(data, ndays): $/;"	f
EWMA_NIFTY	MA_from_quantinsti.py	/^EWMA_NIFTY = EWMA(data,ew)$/;"	v
EWMA_NIFTY	MA_from_quantinsti.py	/^EWMA_NIFTY = EWMA_NIFTY.dropna()$/;"	v
Eden	algos/PID_control_01.py	/^Eden = [5.0e-7, 1.0, 0]$/;"	v
Enum	algos/PID_control_01.py	/^Enum = [1.0005e-5, 0.0100005, 1.0]$/;"	v
FUENTE_200V	magneto_paremeters_calculate.py	/^FUENTE_200V = 200.0$/;"	v
FUENTE_200V	magneto_paremeters_prototyping.py	/^FUENTE_200V = 200.0$/;"	v
FUENTE_40V	magneto_paremeters_calculate.py	/^FUENTE_40V = 40.0					#40V y 200V son lo que esta hardcodeado$/;"	v
FUENTE_40V	magneto_paremeters_prototyping.py	/^FUENTE_40V = 40.0					#40V y 200V son lo que esta hardcodeado$/;"	v
FlushLog	algos/datalogger.py	/^def FlushLog (data):$/;"	f
ForceIndex	ForceI_from_quantinsti.py	/^def ForceIndex(data, ndays): $/;"	f
G	algos/sympy_test_03.py	/^G=G1*G2$/;"	v
G1	algos/Tfilter_sympy_01.py	/^G1 = (RL * ZT) \/ (Z1 * Z2 + Z1 * RL + Z1 * ZT + ZT * Z2 + ZT * RL)$/;"	v
G1	algos/discrete_esay_control_lib_03.py	/^G1 = dsys1$/;"	v
G1	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^G1 = dsys1$/;"	v
G1	algos/sympy_test_03.py	/^G1 = 1 \/ (s + 1)$/;"	v
G2	algos/discrete_esay_control_lib_03.py	/^G2 = 350.\/3.3$/;"	v
G2	algos/sympy_test_03.py	/^G2 = 10*s \/ (s + 10)$/;"	v
GH	algos/discrete_esay_control_lib_03.py	/^GH = ct.series(Gpid, Gt)$/;"	v
GH	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^GH = ct.series(Gpid, Gt)$/;"	v
GHA	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^GHA = ct.series(Gpid, Gt * Alpha)$/;"	v
Gfeed	algos/discrete_esay_control_lib_03.py	/^Gfeed = ct.feedback(GH, sys2=1, sign=-1)$/;"	v
Gfeed	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^Gfeed = ct.feedback(GH, sys2=1, sign=-1)$/;"	v
Gp	algos/dippolito_continuo_01.py	/^Gp = 1 \/ (s**2 + s + 9)$/;"	v
Gpid	algos/discrete_esay_control_lib_03.py	/^Gpid = ct.tf(bpid, apid, dt)$/;"	v
Gpid	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^Gpid = ct.tf(bpid, apid, dt)$/;"	v
Gt	algos/discrete_esay_control_lib_03.py	/^Gt = ct.series(G1, G2)$/;"	v
Gt	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^Gt = ct.series(G1, Beta)$/;"	v
H	algos/dippolito_continuo_01.py	/^H = 441 * (s+3)$/;"	v
H	algos/saw_01.py	/^H = 1\/s * (s**2 * Lm * Cm + s * Rm * Cm + 1) \/ (s**2 * Lm * Cm * Cp + s * Rm * Cm * Cp + Cm + Cp)$/;"	v
H	algos/saw_02.py	/^H = 1\/s * (s**2 * Lm * Cm + s * Rm * Cm + 1) \/ (s**2 * Lm * Cm * Cp + s * Rm * Cm * Cp + Cm + Cp)$/;"	v
H	algos/saw_03.py	/^H = 1\/s * (s**2 * Lm * Cm + s * Rm * Cm + 1) \/ (s**2 * Lm * Cm * Cp + s * Rm * Cm * Cp + Cm + Cp)$/;"	v
Hjw	MAF_01.py	/^Hjw = 0.25 * (1 + exp(-1*2j*pi*f) + exp(-2*2j*pi*f) + exp(-3*2j*pi*f))$/;"	v
Hjw	algos/MAF_01.py	/^Hjw = 0.25 * (1 + exp(-1*2j*pi*f) + exp(-2*2j*pi*f) + exp(-3*2j*pi*f))$/;"	v
Hjw	algos/MAF_02.py	/^Hjw = 1.\/8. * (1 + exp(-2j*pi*f) + exp(-2*2j*pi*f) + exp(-3*2j*pi*f) + exp(-4*2j*pi*f) + exp(-5*2j*pi*f) + exp(-6*2j*pi*f)+ exp(-7*2j*pi*f))$/;"	v
Hjw	algos/zero_out_01.py	/^Hjw = 0.25 * (1 - 2 * exp(-2j*pi*f) + exp(-2*2j*pi*f))$/;"	v
Hjw1	algos/MAF_02.py	/^Hjw1 = Hjw[0:500]$/;"	v
Hjw1	algos/zero_out_01.py	/^Hjw1 = Hjw[0:500]$/;"	v
I	EM_conductor_01.py	/^I = 10000000000$/;"	v
I_Sense	algos/PID_solo_KP_pulsos.py	/^I_Sense = 69$/;"	v
Id	diode.py	/^Id = Is*(np.exp(Vd1\/(n*Vt))-1)$/;"	v
Id2	diode.py	/^Id2 = (12 - Vd2)\/Rserie$/;"	v
Inoise	medidor_Irms_placa_redonda02.py	/^Inoise = np.ones_like(t)$/;"	v
Inoise_peak	medidor_Irms_placa_redonda02.py	/^Inoise_peak = 0.068		#tension pico a pico del ruido$/;"	v
Ipeak	medidor_Irms_placa_redonda02.py	/^Ipeak = 0.4				#tension pico de la corriente$/;"	v
Ipp	medidor_Irms_placa_redonda02.py	/^Ipp = Ipeak * np.sin(wi*t)$/;"	v
Is	diode.py	/^Is = 10**-12$/;"	v
K1	algos/PID_solo_KP_pulsos.py	/^K1 = (KP + KI + KD)$/;"	v
K2	algos/PID_solo_KP_pulsos.py	/^K2 = (KP + KD + KD)$/;"	v
K3	algos/PID_solo_KP_pulsos.py	/^K3 = (KD)$/;"	v
KD	algos/PID_solo_KP_pulsos.py	/^KD = 0$/;"	v
KI	algos/PID_solo_KP_pulsos.py	/^KI = 0.0$/;"	v
KP	algos/PID_solo_KP_pulsos.py	/^KP = 3.2$/;"	v
KP	algos/system_z01.py	/^KP = 1$/;"	v
Kpwm	algos/system_z01.py	/^Kpwm = 69 \/ 224$/;"	v
Ks	EM_n_rings_resonator.py	/^Ks = [EMpy.devices.Coupler(wls, numpy.sqrt(0.08), 1.),$/;"	v
Kt	algos/system_z01.py	/^Kt = KP * Kpwm$/;"	v
L	current_graph_01.py	/^L = 18e-3$/;"	v
L1	algos/Tfilter_sympy_01.py	/^L1 = 1.4e-3$/;"	v
L2	algos/Tfilter_sympy_01.py	/^L2 = 1.4e-3$/;"	v
LR_tau	magneto_paremeters_calculate.py	/^LR_tau = inductance \/ resistance$/;"	v
LR_tau	magneto_paremeters_prototyping.py	/^LR_tau = inductance \/ resistance$/;"	v
Lm	algos/saw_01.py	/^Lm = 86e-6      #86uHy$/;"	v
Lm	algos/saw_02.py	/^Lm = 86e-6      #86uHy$/;"	v
Lm	algos/saw_03.py	/^Lm = 79.82e-6      #86uHy$/;"	v
LookForTransitions	square_codes_02.py	/^def LookForTransitions (signal):$/;"	f
LookForTransitions	square_codes_03.py	/^def LookForTransitions (t, signal):$/;"	f
LookForTransitions2	square_codes_02.py	/^def LookForTransitions2 (signal):$/;"	f
LookForTransitions2	square_codes_03.py	/^def LookForTransitions2 (signal):$/;"	f
MadeString	algos/datalogger.py	/^def MadeString(data):$/;"	f
Main	algos/datalogger.py	/^def Main():    $/;"	f
Main	algos/serial_test.py	/^def Main():$/;"	f
Main	algos/serial_test_thread.py	/^def Main():$/;"	f
N	algos/halfband_filter.py	/^N = 32  # Filter order$/;"	v
N	portfolio_from_quantopian.py	/^N = 10$/;"	v
N	square_codes_01.py	/^N = 10$/;"	v
N	square_codes_02.py	/^N = 10$/;"	v
N	square_codes_03.py	/^N = 10$/;"	v
N	square_wave_vector.py	/^N = 10$/;"	v
NIFTY	Volatil_from_quantinsti.py	/^NIFTY = web.DataReader('WFC',data_source='yahoo',start='1\/1\/2015', end='today')$/;"	v
NIFTY_BBANDS	Bollinger_from_quantinsti.py	/^NIFTY_BBANDS = BBANDS(data, n)$/;"	v
NIFTY_CCI	CCI_from_quantinsti.py	/^NIFTY_CCI = CCI(data, n)$/;"	v
NIFTY_ROC	ROC_from_quantinsti.py	/^NIFTY_ROC = ROC(data,n)$/;"	v
NRR	EM_n_rings_resonator.py	/^NRR = EMpy.devices.NRR(Ks, neffs, l1s, l2s).solve()$/;"	v
OpenLoop	algos/dippolito_continuo_01.py	/^OpenLoop = H*Gp$/;"	v
OpenLoop_sim	algos/dippolito_continuo_01.py	/^OpenLoop_sim = OpenLoop.simplify()$/;"	v
PID_roof	algos/PID_solo_KP_pulsos.py	/^def PID_roof (setpoint, sample, last_d):$/;"	f
PID_simple	algos/PID_solo_KP_pulsos.py	/^def PID_simple (setpoint, sample):$/;"	f
PL	magneto_paremeters_calculate.py	/^PL = 0.5 * inductance * current_limit * current_limit \/ period$/;"	v
PL	magneto_paremeters_prototyping.py	/^PL = 0.5 * inductance * current_limit * current_limit \/ period$/;"	v
PRL	magneto_paremeters_calculate.py	/^PRL = voltageRL * voltageRL \/ resistance$/;"	v
PRL	magneto_paremeters_prototyping.py	/^PRL = voltageRL * voltageRL \/ resistance$/;"	v
PRsnubber	magneto_paremeters_calculate.py	/^PRsnubber = PL - PRL$/;"	v
PRsnubber	magneto_paremeters_prototyping.py	/^PRsnubber = PL - PRL$/;"	v
R	EM_n_rings_resonator.py	/^R = 5e-6$/;"	v
RL	algos/Tfilter_sympy_01.py	/^RL = 1700$/;"	v
ROC	ROC_from_quantinsti.py	/^ROC = NIFTY_ROC['Rate of Change']$/;"	v
ROC	ROC_from_quantinsti.py	/^def ROC(data,n):$/;"	f
RSNUBBER_POWER_MAX	magneto_paremeters_calculate.py	/^RSNUBBER_POWER_MAX = 15.0$/;"	v
RSNUBBER_POWER_MAX	magneto_paremeters_prototyping.py	/^RSNUBBER_POWER_MAX = 15.0$/;"	v
RT	algos/Tfilter_sympy_01.py	/^RT = 18$/;"	v
R_1	portfolio_from_quantopian.py	/^R_1 = np.random.normal(1.01, 0.03, 100)     #mean = 1.01 std=0.03$/;"	v
R_i	portfolio_from_quantopian.py	/^    R_i = R_1 + np.random.normal(0.001, 0.02, 100)$/;"	v
Rm	algos/saw_01.py	/^Rm = 26$/;"	v
Rm	algos/saw_02.py	/^Rm = 26$/;"	v
Rm	algos/saw_03.py	/^Rm = 18$/;"	v
Rserie	diode.py	/^Rserie = 1000$/;"	v
SMA	MA_from_quantinsti.py	/^SMA = SMA_NIFTY['SMA']$/;"	v
SMA	MA_from_quantinsti.py	/^def SMA(data, ndays): $/;"	f
SMA_NIFTY	MA_from_quantinsti.py	/^SMA_NIFTY = SMA(data,n)$/;"	v
SMA_NIFTY	MA_from_quantinsti.py	/^SMA_NIFTY = SMA_NIFTY.dropna()$/;"	v
SWG	EM_n_rings_resonator.py	/^SWG = EMpy.devices.SWG(400, 220, 125).solve(wls)$/;"	v
SerialWorker	algos/datalogger.py	/^def SerialWorker (s):$/;"	f
SerialWorker	algos/serial_test_thread.py	/^def SerialWorker (s):$/;"	f
System_sim	algos/system_z01.py	/^System_sim = system.simplify()  # Esta función me permite ver como queda acomodada la función transferencia de H*Gp$/;"	v
T	algos/dippolito_continuo_01.py	/^T = (H * Gp) \/ (1 + (H*Gp))$/;"	v
T	algos/discrete_esay_control_lib_02.py	/^T = np.ndarray((T1.size,1), dtype=float)$/;"	v
T1	algos/discrete_esay_control_lib_02.py	/^T1 = np.arange(0.0, 0.02, 0.001)       #OK con step NOK con step_response$/;"	v
Td	magneto_paremeters_calculate.py	/^Td = (-LR_tau) * math.log(1 - (current_limit * resistance) \/ Vsnubber2)$/;"	v
Td	magneto_paremeters_prototyping.py	/^Td = (-LR_tau) * math.log(1 - (current_limit * resistance) \/ Vsnubber2)$/;"	v
Td_aux	magneto_paremeters_calculate.py	/^Td_aux = Td + 0.25e-3		#sumo un margen por variaciones de hard$/;"	v
Td_aux	magneto_paremeters_prototyping.py	/^Td_aux = Td + 0.25e-3		#sumo un margen por variaciones de hard$/;"	v
Tf	algos/PID_control_01.py	/^Tf = kd \/ 20$/;"	v
Ts	MAF_01.py	/^Ts = 0.1$/;"	v
Ts	algos/MAF_01.py	/^Ts = 0.1$/;"	v
Ts	algos/MAF_02.py	/^Ts = 0.01$/;"	v
Ts	algos/Tfilter_sympy_01.py	/^Ts = 1.\/25000$/;"	v
Ts	algos/Tfilter_sympy_02.py	/^Ts = 1.\/25000$/;"	v
Ts	algos/implementatio_01.py	/^Ts = 1. \/ fs$/;"	v
Ts	algos/implementation_02.py	/^Ts = 1. \/ fs$/;"	v
Ts	algos/implementation_03.py	/^Ts = 1. \/ fs$/;"	v
Ts	algos/implementation_04.py	/^Ts = 1. \/ fs$/;"	v
Ts	algos/implementation_05_result_micro.py	/^Ts = 1. \/ fs$/;"	v
Ts	algos/max_error.py	/^Ts = 0.0005$/;"	v
Ts	algos/rms_calc_01.py	/^Ts = 0.0005$/;"	v
Ts	algos/rms_calc_02.py	/^Ts = 0.0005$/;"	v
Ts	algos/rms_calc_03.py	/^Ts = 0.0005$/;"	v
Ts	algos/rms_calc_04.py	/^Ts = 0.0005        #fs = 2000Hz 40 muestras$/;"	v
Ts	algos/rms_calc_imple01.py	/^Ts = 0.00025       #fs = 4000Hz 80 muestras$/;"	v
Ts	algos/zero_out_01.py	/^Ts = 0.01$/;"	v
Ts	max_error.py	/^Ts = 0.0005$/;"	v
Tsim	algos/dippolito_continuo_01.py	/^Tsim = T.simplify()  # Esta función me permite ver como queda acomodada la función transferencia de H*Gp$/;"	v
U	current_graph_01.py	/^U = 40.0$/;"	v
UpdateTransitions	square_codes_02.py	/^def UpdateTransitions (transition):$/;"	f
UpdateTransitions	square_codes_03.py	/^def UpdateTransitions (transition):$/;"	f
Vd1	diode.py	/^Vd1=np.arange(-5,0.6,0.01)$/;"	v
Vd2	diode.py	/^Vd2 = np.arange(-5,12,0.01)$/;"	v
Vsnubber	magneto_paremeters_calculate.py	/^Vsnubber = math.sqrt(PRsnubber * resistance_discharge)$/;"	v
Vsnubber	magneto_paremeters_prototyping.py	/^Vsnubber = math.sqrt(PRsnubber * resistance_discharge)$/;"	v
Vsnubber2	magneto_paremeters_calculate.py	/^Vsnubber2 = Vsnubber + current_limit * resistance$/;"	v
Vsnubber2	magneto_paremeters_prototyping.py	/^Vsnubber2 = Vsnubber + current_limit * resistance$/;"	v
Vt	diode.py	/^Vt = 0.025$/;"	v
Vzero_current	medidor_Irms_placa_redonda02.py	/^Vzero_current = 1.8		#tension del eje 0$/;"	v
WriteLog	algos/datalogger.py	/^def WriteLog (data):$/;"	f
Z1	algos/Tfilter_sympy_01.py	/^Z1 = s*L1$/;"	v
Z2	algos/Tfilter_sympy_01.py	/^Z2 = s*L2$/;"	v
ZT	algos/Tfilter_sympy_01.py	/^ZT = (s*CT*RT + 1) \/ (s*CT)$/;"	v
Zm	algos/saw_02.py	/^Zm = Rm + s * Lm + 1. \/(s * Cm)$/;"	v
Zm	algos/saw_03.py	/^Zm = Rm + s * Lm + 1. \/(s * Cm)$/;"	v
Zp	algos/saw_02.py	/^Zp = 1. \/ (s * Cp)$/;"	v
Zp	algos/saw_03.py	/^Zp = 1. \/ (s * Cp)$/;"	v
Zt	algos/saw_02.py	/^Zt = Zm * Zp \/ (Zm + Zp)$/;"	v
Zt	algos/saw_03.py	/^Zt = Zm * Zp \/ (Zm + Zp)$/;"	v
a	algos/FIR_design.py	/^a = -a$/;"	v
a	algos/FIR_design.py	/^a = signal.firwin(n, cutoff = 0.3, window = "hamming")$/;"	v
a	algos/FIR_design.py	/^a = signal.firwin(n, cutoff = 0.3, window = "hanning")$/;"	v
a	algos/FIR_design.py	/^a = signal.firwin(n, cutoff = 0.3, window = 'blackmanharris')$/;"	v
a	algos/PID_control_02.py	/^a = [1.0, 0]$/;"	v
a	algos/PID_control_03.py	/^a = [1, -1]$/;"	v
a	algos/PID_control_04_pole_zero.py	/^a = [1, -1]$/;"	v
a	algos/PID_control_05_pole_zero.py	/^a = [1, -1]$/;"	v
a	algos/PID_control_06_pole_two_zero.py	/^a = [1, -1]$/;"	v
a	algos/PID_control_07_pole_two_zero.py	/^a = [1, -1]$/;"	v
a	algos/PID_control_boost_dc_dc_01.py	/^a = [1, -1]$/;"	v
a	algos/discrete_esay_control_lib_02.py	/^a = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]$/;"	v
a	algos/discrete_esay_control_lib_03.py	/^a = [  1.00000000e+00,   9.21237959e-01,   5.39610404e-01, 1.33103857e-18]$/;"	v
a	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^a = [  1.00000000e+00,   9.21237959e-01,   5.39610404e-01, 1.33103857e-18]$/;"	v
a	algos/implementatio_01.py	/^a = [1., -1.94454465, 0.94604136]$/;"	v
a	algos/implementation_02.py	/^a = [1., -1.94454465, 0.94604136]$/;"	v
a	algos/implementation_03.py	/^a = [1., -1.94454465, 0.94604136]$/;"	v
a	algos/implementation_04.py	/^a = [1., -0.9722,]$/;"	v
a	algos/implementation_05_result_micro.py	/^a = [1., -1.94454465, 0.94604136]$/;"	v
a	algos/pandas_test_01.py	/^a = np.random.standard_normal((9, 4))$/;"	v
a	algos/prueba_iir_circle_01.py	/^a = [0, 0, 0, 0, 1]$/;"	v
a	algos/pruebo_print.py	/^a = "Mariano"$/;"	v
a	algos/system_z01.py	/^a = np.array([1, Kt])$/;"	v
a	algos/test1.py	/^a = 26$/;"	v
a1	algos/implementation_03.py	/^a1 = -63717$/;"	v
a1	algos/implementation_04.py	/^a1 = -31856$/;"	v
a1	algos/implementation_05_result_micro.py	/^a1 = -63717$/;"	v
a2	algos/implementation_03.py	/^a2 = 30999$/;"	v
a2	algos/implementation_05_result_micro.py	/^a2 = 30999$/;"	v
a_list	algos/pruebo_print.py	/^a_list = ['this', 'is', 'awesome!']$/;"	v
a_list	algos/pruebo_print.py	/^a_list = {1, "treu", 2, 5}$/;"	v
acc	algos/implementation_05_result_micro.py	/^            acc = resto$/;"	v
acc	algos/implementation_05_result_micro.py	/^acc = 0$/;"	v
acc	algos/implementation_05_result_micro.py	/^acc = 1$/;"	v
adig	algos/PID_analog_to_PID_digital.py	/^adig = [1.0, -1.]$/;"	v
adig	algos/pole_zero_placement_01.py	/^adig = [1.0, 0, 0.877969]$/;"	v
adig	algos/pole_zero_placement_02.py	/^adig = [1.0, -1.]$/;"	v
adig	algos/pole_zero_placement_02.py	/^adig = den.expand()$/;"	v
adig	algos/pole_zero_placement_03.py	/^adig = [1.0, -1.]$/;"	v
adig	algos/pole_zero_placement_03.py	/^adig = den.expand()$/;"	v
adig	algos/pole_zero_placement_04.py	/^adig = [1.0, -1.]$/;"	v
angles	algos/discrete_esay_01.py	/^angles = np.unwrap(np.angle(h))$/;"	v
angles	algos/discrete_esay_02.py	/^angles = np.unwrap(np.angle(h))$/;"	v
angles	algos/discrete_esay_03.py	/^angles = np.unwrap(np.angle(h))$/;"	v
angles	algos/discrete_esay_control_lib_01.py	/^angles = np.unwrap(np.angle(h))$/;"	v
anykey	algos/datalogger.py	/^def anykey():$/;"	f
anykey	algos/serial_test_thread.py	/^def anykey():$/;"	f
apid	algos/discrete_esay_control_lib_03.py	/^apid = [1, -1]$/;"	v
apid	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^apid = [1, -1]$/;"	v
apple	Stocks/pandas_pdr.py	/^	apple = pdr.get_data_yahoo('AAPL', start, end)$/;"	v
armado	METAB_fallas.py	/^armado = 3$/;"	v
armado	METAB_fallas2.py	/^armado = 3$/;"	v
assets	portfolio_from_quantopian.py	/^assets = np.zeros((N, 100))$/;"	v
ax	CCI_from_quantinsti.py	/^ax = fig.add_subplot(2, 1, 1)$/;"	v
ax	EVM_from_quantinsti.py	/^ax = fig.add_subplot(2, 1, 1)$/;"	v
ax	ROC_from_quantinsti.py	/^ax = fig.add_subplot(2, 1, 1)$/;"	v
ax	algos/rms_calc_03.py	/^ax = plt.subplot(111, polar=True)$/;"	v
ax	square_wave_vector.py	/^ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])$/;"	v
ax0	algos/halfband_filter.py	/^ax0 = fig.add_subplot(211)$/;"	v
ax1	METAB_fallas.py	/^ax1 = fig.add_subplot(111) # and a subplot$/;"	v
ax1	METAB_fallas2.py	/^ax1 = fig.add_subplot(111) # and a subplot$/;"	v
ax1	algos/PID_control_04_pole_zero.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/PID_control_05_pole_zero.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/PID_control_06_pole_two_zero.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/PID_control_07_pole_two_zero.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/PID_control_boost_dc_dc_01.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/discrete_esay_01.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/discrete_esay_02.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/discrete_esay_03.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/discrete_esay_control_lib_01.py	/^ax1 = fig.add_subplot(111)$/;"	v
ax1	algos/halfband_filter.py	/^ax1 = fig.add_subplot(212)$/;"	v
ax1	algos/halfband_filter.py	/^ax1 = fig2.add_subplot(111)$/;"	v
ax1	pareto_chart.py	/^ax1 = fig.add_subplot(111) # and a subplot$/;"	v
ax2	METAB_fallas.py	/^ax2 = ax1.twinx() # create a duplicate y axis$/;"	v
ax2	METAB_fallas2.py	/^ax2 = ax1.twinx() # create a duplicate y axis$/;"	v
ax2	algos/discrete_esay_01.py	/^ax2 = ax1.twinx()$/;"	v
ax2	algos/discrete_esay_02.py	/^ax2 = ax1.twinx()$/;"	v
ax2	algos/discrete_esay_03.py	/^ax2 = ax1.twinx()$/;"	v
ax2	algos/discrete_esay_control_lib_01.py	/^ax2 = ax1.twinx()$/;"	v
ax2	pareto_chart.py	/^ax2 = ax1.twinx() # create a duplicate y axis$/;"	v
b	algos/FIR_design.py	/^b = - signal.firwin(n, cutoff = 0.5, window = 'blackmanharris'); b[n\/2] = b[n\/2] + 1$/;"	v
b	algos/PID_control_02.py	/^b = [kd, kp, ki]$/;"	v
b	algos/PID_control_03.py	/^b = [k1, k2, k3]$/;"	v
b	algos/PID_control_04_pole_zero.py	/^b = [kp + kd, -kd]$/;"	v
b	algos/PID_control_05_pole_zero.py	/^b = [kp + kd + ki, ki - kd]$/;"	v
b	algos/PID_control_06_pole_two_zero.py	/^b = [kp + kd + ki, -kp - 2*kd, kd]     #del spice$/;"	v
b	algos/PID_control_07_pole_two_zero.py	/^b = [kp + kd + ki, -kp - 2*kd, kd]     #del spice$/;"	v
b	algos/PID_control_boost_dc_dc_01.py	/^b = [kp + kd + ki, -kp - 2*kd, kd]     #del spice$/;"	v
b	algos/discrete_esay_01.py	/^b = signal.firwin(80, 0.5, window=('kaiser', 8))$/;"	v
b	algos/discrete_esay_02.py	/^b = [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]$/;"	v
b	algos/discrete_esay_03.py	/^b = [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]$/;"	v
b	algos/discrete_esay_control_lib_01.py	/^b = [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]$/;"	v
b	algos/discrete_esay_control_lib_02.py	/^b = [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]$/;"	v
b	algos/discrete_esay_control_lib_03.py	/^b = [ 0.        ,  1.48941694,  0.9759379 , -0.00450648]$/;"	v
b	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^b = [ 0.        ,  1.48941694,  0.9759379 , -0.00450648]$/;"	v
b	algos/halfband_filter.py	/^b = signal.firwin(N+1, 0.5)$/;"	v
b	algos/implementatio_01.py	/^b = [0.9726465, -1.945293, 0.9726465]$/;"	v
b	algos/implementation_02.py	/^b = [0.9726465, -1.945293, 0.9726465]$/;"	v
b	algos/implementation_03.py	/^b = [0.9726465, -1.945293, 0.9726465]$/;"	v
b	algos/implementation_04.py	/^b = [1., -1]$/;"	v
b	algos/implementation_05_result_micro.py	/^b = [0.9726465, -1.945293, 0.9726465]$/;"	v
b	algos/prueba_iir_circle_01.py	/^b = [1, -1.5877, 2.8377, -1.7346, 1.25]$/;"	v
b	algos/pruebo_print.py	/^b = "Chau"$/;"	v
b	algos/system_z01.py	/^b = np.array([Kt, 0])$/;"	v
b0	algos/implementation_03.py	/^b0 = 31870$/;"	v
b0	algos/implementation_04.py	/^b0 = 32767$/;"	v
b0	algos/implementation_05_result_micro.py	/^b0 = 31870$/;"	v
b1	algos/implementation_03.py	/^b1 = -63740$/;"	v
b1	algos/implementation_04.py	/^b1 = -32767$/;"	v
b1	algos/implementation_05_result_micro.py	/^b1 = -63740$/;"	v
b2	algos/implementation_03.py	/^b2 = 31870$/;"	v
b2	algos/implementation_05_result_micro.py	/^b2 = 31870$/;"	v
backup	Stocks/pandas_pdr.py	/^	backup = pd.read_csv("apple_csv.txt")$/;"	v
bands	algos/halfband_filter.py	/^bands = numpy.array([0., .22, .28, .5])$/;"	v
baud	algos/datalogger.py	/^baud = 9600$/;"	v
baud	algos/serial_test.py	/^baud = 9600$/;"	v
baud	algos/serial_test_thread.py	/^baud = 9600$/;"	v
bdig	algos/PID_analog_to_PID_digital.py	/^bdig = [k1, k2, k3]$/;"	v
bdig	algos/pole_zero_placement_01.py	/^bdig = [1.0, 0, -1.0]$/;"	v
bdig	algos/pole_zero_placement_02.py	/^bdig = [1.0, - 2.76967246245984, + 3.5690333642877, - 2.76967246245984, + 1.0]$/;"	v
bdig	algos/pole_zero_placement_02.py	/^bdig = num.expand()$/;"	v
bdig	algos/pole_zero_placement_03.py	/^bdig = [1.0, - 3.87931070665274, + 5.64406277927486, - 3.65004344388956, + 0.88529281]$/;"	v
bdig	algos/pole_zero_placement_03.py	/^bdig = num.expand()$/;"	v
bdig	algos/pole_zero_placement_04.py	/^bdig = [k1, k2, k3]$/;"	v
bfield	EM_conductor_01.py	/^def bfield(x,y,z):$/;"	f
bit_vals	square_codes_01.py	/^bit_vals = [-1, 1]$/;"	v
bit_vals	square_codes_02.py	/^bit_vals = [-1, 1]$/;"	v
bit_vals	square_codes_03.py	/^bit_vals = [-1, 1]$/;"	v
bit_vals	square_wave_vector.py	/^bit_vals = [-1, 1]$/;"	v
bits	MLE_on_code_detect.py	/^bits = pilot_bits + code_bits + 1$/;"	v
bmatrix	EM_conductor_01.py	/^bmatrix = np.zeros((xwidth,ywidth))$/;"	v
boundary	EM_fully_vect.py	/^boundary = '0000'$/;"	v
bpid	algos/discrete_esay_control_lib_03.py	/^bpid = [kp + kd + ki, -kp - 2*kd, kd]     #del spice$/;"	v
bpid	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^bpid = [kp + kd + ki, -kp - 2*kd, kd]     #del spice$/;"	v
bx	CCI_from_quantinsti.py	/^bx = fig.add_subplot(2, 1, 2)$/;"	v
bx	EVM_from_quantinsti.py	/^bx = fig.add_subplot(2, 1, 2)$/;"	v
bx	ROC_from_quantinsti.py	/^bx = fig.add_subplot(2, 1, 2)$/;"	v
bx	algos/halfband_filter.py	/^bx = bands*2*pi$/;"	v
cantidad_pcb	METAB_fallas.py	/^cantidad_pcb = primeras + segundas$/;"	v
cantidad_pcb	METAB_fallas2.py	/^cantidad_pcb = primeras + segundas$/;"	v
capacitance_discharge	magneto_paremeters_calculate.py	/^capacitance_discharge = 100e-6		#Farads$/;"	v
capacitance_discharge	magneto_paremeters_prototyping.py	/^capacitance_discharge = 100e-6		#Farads$/;"	v
check_tickers_file	Stocks/get_tickers.py	/^def check_tickers_file (t_name):$/;"	f
clk_vect	MLE_on_code_detect.py	/^clk_vect = np.zeros(transitions)$/;"	v
clks	MLE_on_code_detect.py	/^clks = bits * 3.0$/;"	v
close	MA_from_quantinsti.py	/^close = data['Close']$/;"	v
code_bits	MLE_on_code_detect.py	/^code_bits = 24$/;"	v
code_to_tx	MLE_on_code_detect.py	/^code_to_tx = np.array([1,1,1,0,0,0,1,1,1,0,0,0])$/;"	v
code_to_tx	square_codes_01.py	/^code_to_tx = np.array([1,1,1,0,0,0,1,1,1,0,0,0])$/;"	v
code_to_tx	square_codes_02.py	/^code_to_tx = np.array([1,1,1,0,0,0,1,1,1,0,0,0])$/;"	v
code_to_tx	square_codes_03.py	/^code_to_tx = np.array([1,1,1,0,0,0,1,1,1,0,0,0])$/;"	v
code_vect	MLE_on_code_detect.py	/^code_vect = np.zeros(transitions)$/;"	v
constant	EM_conductor_01.py	/^constant = mu0\/(4*np.pi)$/;"	v
control	algos/dippolito_continuo_01.py	/^control = lti(num, den)$/;"	v
coord	EM_conductor_01.py	/^coord = [(10,10), (20,10), (20,20), (10,20), (10,25)]$/;"	v
coord2	EM_conductor_01.py	/^coord2 = []$/;"	v
cov_mat	portfolio_from_quantopian.py	/^cov_mat = np.cov(returns)$/;"	v
create_single_ticker	Stocks/get_tickers.py	/^def create_single_ticker (t_name):$/;"	f
current_limit	magneto_paremeters_calculate.py	/^current_limit = 1.2$/;"	v
current_limit	magneto_paremeters_prototyping.py	/^current_limit = 8.0$/;"	v
cval	temp.py	/^cval = [25.4, 24.8, 23.4, 27]$/;"	v
cycles	algos/vmax01.py	/^cycles = 2.$/;"	v
cyclesize	algos/vmax01.py	/^cyclesize = length \/ cycles$/;"	v
d	EM_single_layer.py	/^d = numpy.array([numpy.inf, 387.5e-9 \/ 1.38, numpy.inf])$/;"	v
d	algos/FIR_design.py	/^d = - (a+b); d[n\/2] = d[n\/2] + 1$/;"	v
d	algos/PID_solo_KP_pulsos.py	/^d = 224$/;"	v
data	Bollinger_from_quantinsti.py	/^data = pd.DataFrame(data)$/;"	v
data	Bollinger_from_quantinsti.py	/^data = web.DataReader('^NSEI',data_source='yahoo',start='1\/1\/2010', end='1\/1\/2016')$/;"	v
data	CCI_from_quantinsti.py	/^data = pd.DataFrame(data)$/;"	v
data	CCI_from_quantinsti.py	/^data = web.DataReader('^NSEI',data_source='yahoo',start='1\/1\/2014', end='1\/1\/2016')$/;"	v
data	EVM_from_quantinsti.py	/^data = pd.DataFrame(data)$/;"	v
data	EVM_from_quantinsti.py	/^data = web.DataReader('AAPL',data_source='yahoo',start='1\/1\/2015', end='1\/1\/2016')$/;"	v
data	ForceI_from_quantinsti.py	/^data = pd.DataFrame(data)$/;"	v
data	ForceI_from_quantinsti.py	/^data = web.DataReader('AAPL',data_source='yahoo',start='1\/1\/2010', end='1\/1\/2016')$/;"	v
data	MA_from_quantinsti.py	/^data = pd.DataFrame(data) $/;"	v
data	MA_from_quantinsti.py	/^data = web.DataReader('WFC',data_source='yahoo',start='1\/1\/2016', end='today')$/;"	v
data	ROC_from_quantinsti.py	/^data = pd.DataFrame(data)$/;"	v
data	ROC_from_quantinsti.py	/^data = web.DataReader('^NSEI',data_source='yahoo',start='6\/1\/2015',end='1\/1\/2016')$/;"	v
data	algos/data_read_example.py	/^data=data[1:,:]#eliminate first row of data (row 0)$/;"	v
data	algos/data_read_example.py	/^data=io.read_array('fourier_hw1.txt',separator='\\t')#read data from file (tab-delimited)$/;"	v
data	file_test.py	/^data = np.loadtxt(f, skiprows = 1)$/;"	v
dates	algos/pandas_test_01.py	/^dates = pd.date_range('2015-1-1', periods=9, freq = 'M')$/;"	v
defects	pareto_chart.py	/^defects = [32, 22, 15, 5, 2]$/;"	v
den	algos/Tfilter_sympy_01.py	/^den = [1.96e-6, 2.4304, 43327.2727272727, 7727272727.27273]$/;"	v
den	algos/Tfilter_sympy_02.py	/^den = [1.96e-6, 2.4304, 43327.2727272727, 7727272727.27273]$/;"	v
den	algos/dippolito_continuo_01.py	/^den = [1,442,1332]$/;"	v
den	algos/pole_zero_placement_02.py	/^den = (z - freqp1\/fs)$/;"	v
den	algos/pole_zero_placement_03.py	/^den = (z - freqp1\/fs)$/;"	v
den	algos/saw_01.py	/^den = [2.451e-28, 7.41e-23, 3.4e-12, 0]$/;"	v
den	algos/system_z01.py	/^den = z + Kt$/;"	v
den1	algos/dippolito_continuo_01.py	/^den1 = [1,1,9] $/;"	v
denH	algos/saw_02.py	/^denH = [2.451e-28, 7.41e-23, 3.4e-12, 0]$/;"	v
denH	algos/saw_03.py	/^denH = [2.451e-28, 7.41e-23, 3.4e-12, 0]$/;"	v
denZ	algos/saw_02.py	/^denZ = [8.6e-5, 26.0, 1192982456140.35, 0]$/;"	v
denZ	algos/saw_03.py	/^denZ = [7.982e-5, 18.0, 593906592697716.0, 0]$/;"	v
den_open	algos/dippolito_continuo_01.py	/^den_open = den1$/;"	v
df	Stocks/get_tickers.py	/^	df = get_tickers()$/;"	v
df	algos/pandas_test_01.py	/^df = pd.DataFrame(a)$/;"	v
df1	algos/pandas_test_01.py	/^df1 = df.cumsum()$/;"	v
dpid	algos/PID_solo_KP_pulsos.py	/^dpid = np.zeros_like (sp)$/;"	v
dplot	algos/pandas_test_02.py	/^dplot = DAX['Close']$/;"	v
dpwm	algos/PID_solo_KP_pulsos.py	/^dpwm = np.zeros_like (sp)$/;"	v
dsys1	algos/discrete_esay_control_lib_02.py	/^dsys1 = ct.tf(b, a, dt)$/;"	v
dsys1	algos/discrete_esay_control_lib_03.py	/^dsys1 = ct.tf(b, a, dt)$/;"	v
dsys1	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^dsys1 = ct.tf(b, a, dt)$/;"	v
dt	algos/discrete_esay_control_lib_02.py	/^dt = 1.0$/;"	v
dt	algos/discrete_esay_control_lib_03.py	/^dt = 1.0\/25000$/;"	v
dt	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^dt = 1.0\/25000$/;"	v
e	algos/PID_solo_KP_pulsos.py	/^e = np.zeros_like (sp)$/;"	v
end	Stocks/pandas_pdr.py	/^end = datetime.date.today()$/;"	v
end_of_start_bit	square_codes_01.py	/^end_of_start_bit = len_pilot + int(noisy_lambda)$/;"	v
end_of_start_bit	square_codes_01.py	/^end_of_start_bit = len_pilot + len_lambda$/;"	v
end_of_start_bit	square_codes_02.py	/^end_of_start_bit = len_pilot + len_lambda$/;"	v
end_of_start_bit	square_codes_02.py	/^end_of_start_bit = len_pilot + noisy_lambda$/;"	v
end_of_start_bit	square_codes_03.py	/^end_of_start_bit = len_pilot + len_lambda$/;"	v
end_of_start_bit	square_codes_03.py	/^end_of_start_bit = len_pilot + noisy_lambda$/;"	v
end_of_wait_bit	square_codes_01.py	/^end_of_wait_bit = end_of_start_bit + int(noisy_lambda)$/;"	v
end_of_wait_bit	square_codes_01.py	/^end_of_wait_bit = end_of_start_bit + len_lambda$/;"	v
epsfunc	EM_fully_vect.py	/^def epsfunc(x_, y_):$/;"	f
error_z1	algos/PID_solo_KP_pulsos.py	/^error_z1 = 0$/;"	v
error_z2	algos/PID_solo_KP_pulsos.py	/^error_z2 = 0$/;"	v
ew	MA_from_quantinsti.py	/^ew = 200$/;"	v
expr	algos/sympy_test_01.py	/^expr = x**2 + x*y$/;"	v
expr1	algos/sympy_test_02.py	/^expr1 = diff(cos(x), x)$/;"	v
expr2	algos/sympy_test_02.py	/^expr2 = diff(exp(x**2), x)$/;"	v
f	MAF_01.py	/^f = np.arange (0, 1, 0.001)$/;"	v
f	algos/MAF_01.py	/^f = np.arange (0, 1, 0.001)$/;"	v
f	algos/MAF_02.py	/^f = np.arange (0.001, 1 \/ Ts, 0.001)$/;"	v
f	algos/PID_control_02.py	/^f=arange(0.1,1000,0.1)$/;"	v
f	algos/PID_control_03_analog.py	/^f=arange(0.1,100000,1)$/;"	v
f	algos/python_lowpass_demo.py	/^f=arange(0.1,1000,0.1)$/;"	v
f	algos/zero_out_01.py	/^f = np.arange (0.001, 1 \/ Ts, 0.001)$/;"	v
f	file_test.py	/^f = open ("TrainExer21.txt")$/;"	v
f1	algos/MAF_02.py	/^f1 = f[0:500]$/;"	v
f1	algos/zero_out_01.py	/^f1 = f[0:500]$/;"	v
falling_time	magneto_paremeters_calculate.py	/^falling_time = 3e-3$/;"	v
falling_time	magneto_paremeters_prototyping.py	/^falling_time = 3e-3$/;"	v
fbank_feat	algos/mlcc_test_01.py	/^fbank_feat = logfbank(sig,rate)$/;"	v
fig	CCI_from_quantinsti.py	/^fig = plt.figure(figsize=(7,5))$/;"	v
fig	EM_fully_vect.py	/^fig = pylab.figure()$/;"	v
fig	EVM_from_quantinsti.py	/^fig = plt.figure(figsize=(7,5))$/;"	v
fig	METAB_fallas.py	/^fig = plt.figure(1)$/;"	v
fig	METAB_fallas2.py	/^fig = plt.figure(1)$/;"	v
fig	ROC_from_quantinsti.py	/^fig = plt.figure(figsize=(7,5))$/;"	v
fig	algos/PID_control_04_pole_zero.py	/^fig = plt.figure()$/;"	v
fig	algos/PID_control_05_pole_zero.py	/^fig = plt.figure()$/;"	v
fig	algos/PID_control_06_pole_two_zero.py	/^fig = plt.figure()$/;"	v
fig	algos/PID_control_07_pole_two_zero.py	/^fig = plt.figure(1)$/;"	v
fig	algos/PID_control_boost_dc_dc_01.py	/^fig = plt.figure(1)$/;"	v
fig	algos/discrete_esay_01.py	/^fig = plt.figure()$/;"	v
fig	algos/discrete_esay_02.py	/^fig = plt.figure()$/;"	v
fig	algos/discrete_esay_03.py	/^fig = plt.figure()$/;"	v
fig	algos/discrete_esay_control_lib_01.py	/^fig = plt.figure()$/;"	v
fig	algos/halfband_filter.py	/^fig = mpl.pyplot.figure(1)$/;"	v
fig	pareto_chart.py	/^fig = plt.figure() # create a figure$/;"	v
fig	square_wave_vector.py	/^fig = plt.figure()$/;"	v
fig2	algos/halfband_filter.py	/^fig2 = mpl.pyplot.figure(2)$/;"	v
fo	algos/implementatio_01.py	/^fo = 50$/;"	v
fo	algos/implementation_02.py	/^fo = 50$/;"	v
fo	algos/implementation_03.py	/^fo = 50$/;"	v
fo	algos/implementation_04.py	/^fo = 50$/;"	v
fo	algos/implementation_05_result_micro.py	/^fo = 50$/;"	v
fpass	algos/rms_calc_01.py	/^fpass = 35$/;"	v
fpass	algos/rms_calc_02.py	/^fpass = 35$/;"	v
fpass	algos/rms_calc_03.py	/^fpass = 35$/;"	v
freq	algos/dippolito_continuo_01.py	/^freq = arange(0.1, 1000, 0.01)$/;"	v
freq	algos/rms_calc_04.py	/^freq = 50$/;"	v
freq	algos/rms_calc_imple01.py	/^freq = 50$/;"	v
freq	algos/saw_01.py	/^freq = np.arange (10e6, 10e9, 10e6)  #de 40 a 1000MHz cada 10MHz$/;"	v
freq	algos/saw_02.py	/^freq = np.arange (10e6, 1000e6, 1e6)  #de 40 a 1000MHz cada 10MHz$/;"	v
freq	algos/saw_03.py	/^freq = np.arange (1000e6, 10000e6, 1e6)  #de 40 a 1000MHz cada 10MHz$/;"	v
freq_fallas	METAB_fallas.py	/^freq_fallas = [umal, manipuleo, armado]$/;"	v
freq_fallas	METAB_fallas2.py	/^freq_fallas = [armado, manipuleo,umal]$/;"	v
freq_fallas_salida	METAB_fallas.py	/^freq_fallas_salida = [salida_umal, salida_manipuleo, salida_armado]$/;"	v
freq_fallas_salida	METAB_fallas2.py	/^freq_fallas_salida = [salida_armado, salida_manipuleo, salida_umal]$/;"	v
freq_i	medidor_Irms_placa_redonda02.py	/^freq_i = 50				#frecuencia de linea$/;"	v
freqp1	algos/pole_zero_placement_02.py	/^freqp1 = fs$/;"	v
freqp1	algos/pole_zero_placement_03.py	/^freqp1 = fs$/;"	v
freqz1	algos/pole_zero_placement_02.py	/^freqz1 = 25.$/;"	v
freqz1	algos/pole_zero_placement_03.py	/^freqz1 = 25.$/;"	v
freqz2	algos/pole_zero_placement_02.py	/^freqz2 = 185.$/;"	v
freqz2	algos/pole_zero_placement_03.py	/^freqz2 = 185.$/;"	v
fs	algos/PID_analog_to_PID_digital.py	/^fs = 44000.$/;"	v
fs	algos/PID_control_02.py	/^fs = 44000$/;"	v
fs	algos/PID_control_03.py	/^fs = 44000$/;"	v
fs	algos/PID_control_04_pole_zero.py	/^fs = 44000$/;"	v
fs	algos/PID_control_05_pole_zero.py	/^fs = 44000$/;"	v
fs	algos/PID_control_06_pole_two_zero.py	/^fs = 44000$/;"	v
fs	algos/PID_control_07_pole_two_zero.py	/^fs = 44000$/;"	v
fs	algos/PID_control_boost_dc_dc_01.py	/^fs = 4400.0$/;"	v
fs	algos/discrete_esay_control_lib_03.py	/^fs = 25000$/;"	v
fs	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^fs = 25000$/;"	v
fs	algos/implementatio_01.py	/^fs = 2000$/;"	v
fs	algos/implementation_02.py	/^fs = 2000$/;"	v
fs	algos/implementation_03.py	/^fs = 2000$/;"	v
fs	algos/implementation_04.py	/^fs = 2000$/;"	v
fs	algos/implementation_05_result_micro.py	/^fs = 2000$/;"	v
fs	algos/pole_zero_placement_01.py	/^fs = 500$/;"	v
fs	algos/pole_zero_placement_02.py	/^fs = 1000.$/;"	v
fs	algos/pole_zero_placement_03.py	/^fs = 44000.$/;"	v
fs	algos/pole_zero_placement_04.py	/^fs = 44000.$/;"	v
fsample	algos/rms_calc_01.py	/^fsample = 1 \/ Ts$/;"	v
fsample	algos/rms_calc_02.py	/^fsample = 1 \/ Ts$/;"	v
fsample	algos/rms_calc_03.py	/^fsample = 1 \/ Ts$/;"	v
fss	algos/PID_analog_to_PID_digital.py	/^fss = int(fs)$/;"	v
fss	algos/pole_zero_placement_03.py	/^fss = int(fs)$/;"	v
fss	algos/pole_zero_placement_04.py	/^fss = int(fs)$/;"	v
fstop	algos/rms_calc_01.py	/^fstop = 5$/;"	v
fstop	algos/rms_calc_02.py	/^fstop = 5$/;"	v
fstop	algos/rms_calc_03.py	/^fstop = 5$/;"	v
gain	algos/PID_control_03_analog.py	/^gain = 1$/;"	v
gan_sistema	algos/PID_solo_KP_pulsos.py	/^gan_sistema = I_Sense \/ d$/;"	v
get_info	Stocks/pandas_pdr.py	/^			get_info = False$/;"	v
get_info	Stocks/pandas_pdr.py	/^get_info = False$/;"	v
get_tickers	Stocks/get_tickers.py	/^def get_tickers ():$/;"	f
h	algos/halfband_filter.py	/^h = signal.remez(N+1, bands, [1,0], [1,1])$/;"	v
handle_data	algos/datalogger.py	/^def handle_data(data, console=False):$/;"	f
handle_data	algos/serial_test_thread.py	/^def handle_data(data, console=False):$/;"	f
i_t	current_graph_01.py	/^i_t = U \/ L * (t - t**2 \/ ( 2 * t_rise))$/;"	v
iacd	algos/rms_calc_imple01.py	/^iacd = np.int16(itd - izerod)$/;"	v
imax	algos/max_error.py	/^imax = 1$/;"	v
imax	algos/rms_calc_01.py	/^imax = 1$/;"	v
imax	algos/rms_calc_02.py	/^imax = 1$/;"	v
imax	algos/rms_calc_03.py	/^imax = 1$/;"	v
imax	algos/rms_calc_04.py	/^imax = 1$/;"	v
imax	algos/rms_calc_imple01.py	/^imax = 1$/;"	v
imax	max_error.py	/^imax = 1$/;"	v
impz	algos/FIR_design.py	/^def impz(b,a=1):$/;"	f
impz	algos/elliptic_bandpass.py	/^def impz(b,a=1):$/;"	f
impz	algos/implementatio_01.py	/^def impz(b,a=1):$/;"	f
impz	algos/prueba_iir_circle_01.py	/^def impz(b,a=1):$/;"	f
impz	algos/rms_calc_01.py	/^def impz(b,a=1):$/;"	f
impz	algos/zero_out_02.py	/^def impz(b,a=1):$/;"	f
ind	pareto_chart.py	/^ind = np.arange(len(defects))  # the x locations for the groups$/;"	v
index	algos/plot_zplane.py	/^    index = arange(0,20)$/;"	v
inductance	magneto_paremeters_calculate.py	/^inductance = 230e-3$/;"	v
inductance	magneto_paremeters_prototyping.py	/^inductance = 18.e-3$/;"	v
information_ratio	sharpe.py	/^def information_ratio(returns, benchmark_returns, days=252):$/;"	f
input_adding	MA_tc_2016_01.py	/^input_adding = input_sin + input_rand;$/;"	v
input_rand	MA_tc_2016_01.py	/^input_rand = np.random.normal(mu, sigma, 1000);$/;"	v
input_sin	MA_tc_2016_01.py	/^input_sin = sin(input_vect);$/;"	v
input_vect	MA_tc_2016_01.py	/^input_vect = np.linspace(0,4*np.pi,1000);$/;"	v
iout	algos/PID_solo_KP_pulsos.py	/^iout = np.zeros_like (sp)$/;"	v
irms	algos/rms_calc_01.py	/^irms = sqrt(ni3)$/;"	v
irms	algos/rms_calc_02.py	/^irms = sqrt(n3)$/;"	v
irms	algos/rms_calc_03.py	/^irms = sqrt(ni3)$/;"	v
irms	algos/rms_calc_04.py	/^irms = sqrt(ni3)$/;"	v
irms	medidor_Irms_placa_redonda.py	/^irms = np.asarray([0.32, 0.505, 0.730, 0.953])$/;"	v
iso_layers	EM_single_layer.py	/^iso_layers = EMpy.utils.Multilayer()$/;"	v
it	algos/max_error.py	/^it = imax * sin(2*pi*50*t)$/;"	v
it	algos/rms_calc_01.py	/^it = imax * sin(2*pi*50*t+5*pi\/4)             #para probar cos phi$/;"	v
it	algos/rms_calc_02.py	/^it = np.ones(1024)$/;"	v
it	algos/rms_calc_03.py	/^it = imax * sin(2*pi*50*t+theta_i)             #para probar cos phi$/;"	v
it	algos/rms_calc_04.py	/^it = imax * sin(2*pi*freq*t+theta_i)             #para probar cos phi$/;"	v
it	algos/rms_calc_imple01.py	/^it = imax * sin(2*pi*freq*t+theta_i)             #para probar cos phi$/;"	v
it	max_error.py	/^it = imax * sin(2*pi*50*t)$/;"	v
itd	algos/max_error.py	/^itd = imax * sin(2*pi*50*t+pi\/40)$/;"	v
itd	algos/rms_calc_imple01.py	/^itd = np.uint16(zero_current + it * 1024)$/;"	v
itd	max_error.py	/^itd = imax * sin(2*pi*50*t+pi\/40)$/;"	v
izerod	algos/rms_calc_imple01.py	/^izerod = np.uint16(itd.sum() \/ lenght)$/;"	v
k	algos/implementatio_01.py	/^k = fs \/ fo$/;"	v
k	algos/implementation_02.py	/^k = fs \/ fo$/;"	v
k	algos/implementation_03.py	/^k = fs \/ fo$/;"	v
k	algos/implementation_04.py	/^k = fs \/ fo$/;"	v
k	algos/implementation_05_result_micro.py	/^k = fs \/ fo$/;"	v
k1	algos/PID_analog_to_PID_digital.py	/^k1 = kp_dig + ki_dig + kd_dig$/;"	v
k1	algos/PID_control_03.py	/^k1 = kp + ki + kd$/;"	v
k1	algos/pole_zero_placement_04.py	/^k1 = kp_dig + ki_dig + kd_dig$/;"	v
k2	algos/PID_analog_to_PID_digital.py	/^k2 = -kp_dig - 2*kd_dig$/;"	v
k2	algos/PID_control_03.py	/^k2 = -kp - 2*kd$/;"	v
k2	algos/pole_zero_placement_04.py	/^k2 = -kp_dig - 2*kd_dig$/;"	v
k3	algos/PID_analog_to_PID_digital.py	/^k3 = kd_dig$/;"	v
k3	algos/PID_control_03.py	/^k3 = kd$/;"	v
k3	algos/pole_zero_placement_04.py	/^k3 = kd_dig$/;"	v
kd	algos/PID_analog_to_PID_digital.py	/^kd = 0.0001$/;"	v
kd	algos/PID_control_01.py	/^kd = 0.00001$/;"	v
kd	algos/PID_control_02.py	/^kd = 0.00001$/;"	v
kd	algos/PID_control_03.py	/^kd = 0.0$/;"	v
kd	algos/PID_control_03_analog.py	/^kd = 0.1$/;"	v
kd	algos/PID_control_04_pole_zero.py	/^kd = 0.45$/;"	v
kd	algos/PID_control_05_pole_zero.py	/^kd = 0.40$/;"	v
kd	algos/PID_control_06_pole_two_zero.py	/^kd = 80$/;"	v
kd	algos/PID_control_07_pole_two_zero.py	/^kd = 0.0$/;"	v
kd	algos/PID_control_boost_dc_dc_01.py	/^kd = 0.0$/;"	v
kd	algos/discrete_esay_control_lib_03.py	/^kd = 0.0$/;"	v
kd	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^kd = 0.0$/;"	v
kd	algos/pole_zero_placement_04.py	/^kd = 0.0001$/;"	v
kd_analog	algos/PID_control_boost_dc_dc_01.py	/^kd_analog = kd \/ fs$/;"	v
kd_dig	algos/PID_analog_to_PID_digital.py	/^kd_dig = kd * fs$/;"	v
kd_dig	algos/pole_zero_placement_04.py	/^kd_dig = kd * fs$/;"	v
ki	algos/PID_analog_to_PID_digital.py	/^ki = 25.$/;"	v
ki	algos/PID_control_01.py	/^ki = 1.0$/;"	v
ki	algos/PID_control_02.py	/^ki = 1.0$/;"	v
ki	algos/PID_control_03.py	/^ki = 0.0093$/;"	v
ki	algos/PID_control_03_analog.py	/^ki = 0.05$/;"	v
ki	algos/PID_control_05_pole_zero.py	/^ki = 0.05$/;"	v
ki	algos/PID_control_06_pole_two_zero.py	/^ki = 0.00012$/;"	v
ki	algos/PID_control_07_pole_two_zero.py	/^ki = 0.0156$/;"	v
ki	algos/PID_control_boost_dc_dc_01.py	/^ki = 1.0$/;"	v
ki	algos/discrete_esay_control_lib_03.py	/^ki = 58.0\/fs$/;"	v
ki	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^ki = 6151.0 * Alpha\/fs$/;"	v
ki	algos/pole_zero_placement_04.py	/^ki = 25.$/;"	v
ki_analog	algos/PID_control_boost_dc_dc_01.py	/^ki_analog = ki * fs$/;"	v
ki_dig	algos/PID_analog_to_PID_digital.py	/^ki_dig = ki \/ fs$/;"	v
ki_dig	algos/pole_zero_placement_04.py	/^ki_dig = ki \/ fs$/;"	v
kp	algos/PID_analog_to_PID_digital.py	/^kp = 0.5$/;"	v
kp	algos/PID_control_01.py	/^kp = 0.01$/;"	v
kp	algos/PID_control_02.py	/^kp = 0.01$/;"	v
kp	algos/PID_control_03.py	/^kp = 1.5$/;"	v
kp	algos/PID_control_03_analog.py	/^kp = 0.025$/;"	v
kp	algos/PID_control_04_pole_zero.py	/^kp = 0.01$/;"	v
kp	algos/PID_control_05_pole_zero.py	/^kp = 0.01$/;"	v
kp	algos/PID_control_06_pole_two_zero.py	/^kp = 0.54$/;"	v
kp	algos/PID_control_07_pole_two_zero.py	/^kp = 4.0$/;"	v
kp	algos/PID_control_boost_dc_dc_01.py	/^kp = 0.0$/;"	v
kp	algos/discrete_esay_control_lib_03.py	/^kp = 0.0015\/fs$/;"	v
kp	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^kp = 0.159 * Alpha\/fs$/;"	v
kp	algos/pole_zero_placement_04.py	/^kp = 0.5$/;"	v
kp_analog	algos/PID_control_boost_dc_dc_01.py	/^kp_analog = kp + ki \/ 2$/;"	v
kp_dig	algos/PID_analog_to_PID_digital.py	/^kp_dig = kp - ki_dig \/ 2$/;"	v
kp_dig	algos/pole_zero_placement_04.py	/^kp_dig = kp - ki_dig \/ 2$/;"	v
kx	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^kx = dict(color='r', linewidth=3.0, label="Gplant vs Omega")$/;"	v
l1s	EM_n_rings_resonator.py	/^l1s = [numpy.pi * R, numpy.pi * R, numpy.pi * R]$/;"	v
l2s	EM_n_rings_resonator.py	/^l2s = [numpy.pi * R, numpy.pi * R, numpy.pi * R]$/;"	v
labels	pareto_chart.py	/^labels = ['vertical', 'horizontal', 'behind', 'left area', 'other']$/;"	v
len_lambda	square_codes_01.py	/^len_lambda = 330$/;"	v
len_lambda	square_codes_02.py	/^len_lambda = 330$/;"	v
len_lambda	square_codes_03.py	/^len_lambda = 330$/;"	v
len_pilot	square_codes_01.py	/^len_pilot = 5000$/;"	v
len_pilot	square_codes_02.py	/^len_pilot = 5000$/;"	v
len_pilot	square_codes_03.py	/^len_pilot = 5000$/;"	v
lenght	algos/implementatio_01.py	/^lenght = 10*k$/;"	v
lenght	algos/implementation_02.py	/^lenght = 3*k$/;"	v
lenght	algos/implementation_03.py	/^lenght = 10*k$/;"	v
lenght	algos/implementation_04.py	/^lenght = 10*k$/;"	v
lenght	algos/implementation_05_result_micro.py	/^lenght = 10*k$/;"	v
lenght	algos/max_error.py	/^lenght = 20$/;"	v
lenght	algos/rms_calc_01.py	/^lenght = 1024$/;"	v
lenght	algos/rms_calc_02.py	/^lenght = 1024$/;"	v
lenght	algos/rms_calc_03.py	/^lenght = 1024$/;"	v
lenght	algos/rms_calc_04.py	/^lenght = 40        #fs = 2000Hz 40 muestras$/;"	v
lenght	algos/rms_calc_imple01.py	/^lenght = 80        #fs = 2000Hz 40 muestras$/;"	v
lenght	max_error.py	/^lenght = 20$/;"	v
length	EM_conductor_01.py	/^    length = (lengthx**2 + lengthy**2)**.5$/;"	v
length	algos/vmax01.py	/^length = 512$/;"	v
length	medidor_Irms_placa_redonda02.py	/^length = 350$/;"	v
lengthx	EM_conductor_01.py	/^    lengthx = coord[n+1][0] - coord[n][0]$/;"	v
lengthy	EM_conductor_01.py	/^    lengthy = coord[n+1][1] - coord[n][1]$/;"	v
linear	medidor_Irms_placa_redonda.py	/^linear = irms * 3.24 + 0.071	#contra eje x int eje y ext$/;"	v
lista_fallas	METAB_fallas.py	/^lista_fallas = [ "uMal", "Manipuleo", "Armado"]$/;"	v
lista_fallas	METAB_fallas2.py	/^lista_fallas = ["Armado" , "Manipuleo", "uMal"]$/;"	v
local_offset	square_codes_01.py	/^    local_offset = offset+x*3*len_lambda$/;"	v
local_offset	square_codes_01.py	/^local_offset = 0$/;"	v
local_offset	square_codes_02.py	/^    local_offset = offset+x*3*len_lambda$/;"	v
local_offset	square_codes_02.py	/^local_offset = 0$/;"	v
local_offset	square_codes_03.py	/^    local_offset = offset+x*3*len_lambda$/;"	v
local_offset	square_codes_03.py	/^local_offset = 0$/;"	v
maintenance_time	magneto_paremeters_calculate.py	/^maintenance_time = 3e-3$/;"	v
maintenance_time	magneto_paremeters_prototyping.py	/^maintenance_time = 10e-3$/;"	v
manipuleo	METAB_fallas.py	/^manipuleo = 6$/;"	v
manipuleo	METAB_fallas2.py	/^manipuleo = 6$/;"	v
mean_returns	portfolio_from_quantopian.py	/^mean_returns = [(np.mean(R) - 1)*100 for R in returns]$/;"	v
mfcc_feat	algos/mlcc_test_01.py	/^mfcc_feat = mfcc(sig,rate)$/;"	v
mfreqz	algos/FIR_design.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/elliptic_bandpass.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/prueba_iir_circle_01.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/rms_calc_01.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/rms_calc_02.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/rms_calc_03.py	/^def mfreqz(b,a=1):$/;"	f
mfreqz	algos/zero_out_02.py	/^def mfreqz(b,a=1):$/;"	f
modigliani_ratio	sharpe.py	/^def modigliani_ratio(returns, benchmark_returns, rf, days=252):$/;"	f
mu0	EM_conductor_01.py	/^mu0 = 1e-7$/;"	v
my_bits	square_codes_01.py	/^my_bits = []$/;"	v
my_bits	square_codes_02.py	/^my_bits = []$/;"	v
my_bits	square_codes_03.py	/^my_bits = []$/;"	v
my_bits	square_wave_vector.py	/^my_bits = []$/;"	v
n	Bollinger_from_quantinsti.py	/^n = 50$/;"	v
n	CCI_from_quantinsti.py	/^n = 20$/;"	v
n	EM_single_layer.py	/^n = numpy.array([1., 1.38, 1.9044])$/;"	v
n	EVM_from_quantinsti.py	/^n = 14$/;"	v
n	ForceI_from_quantinsti.py	/^n = 1$/;"	v
n	MA_from_quantinsti.py	/^n = 50$/;"	v
n	ROC_from_quantinsti.py	/^n = 5$/;"	v
n	algos/FIR_design.py	/^n = 1001$/;"	v
n	algos/FIR_design.py	/^n = 101$/;"	v
n	algos/FIR_design.py	/^n = 61$/;"	v
n	diode.py	/^n = 1;$/;"	v
n0	EM_single_layer.py	/^    n0 = EMpy.materials.RefractiveIndex(n[i])$/;"	v
n2	algos/rms_calc_02.py	/^n2 = response**2$/;"	v
n3	algos/rms_calc_02.py	/^n3 = n2.sum()\/lenght$/;"	v
neffs	EM_n_rings_resonator.py	/^neffs = [SWG.neff, SWG.neff, SWG.neff]$/;"	v
neigs	EM_fully_vect.py	/^neigs = 2$/;"	v
ni2	algos/rms_calc_01.py	/^ni2 = response_i**2$/;"	v
ni2	algos/rms_calc_03.py	/^ni2 = response_i**2$/;"	v
ni2	algos/rms_calc_04.py	/^ni2 = it**2$/;"	v
ni3	algos/rms_calc_01.py	/^ni3 = ni2.sum()\/lenght$/;"	v
ni3	algos/rms_calc_03.py	/^ni3 = ni2.sum()\/lenght$/;"	v
ni3	algos/rms_calc_04.py	/^ni3 = ni2.sum()\/lenght$/;"	v
noisy_lambda	square_codes_01.py	/^    noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
noisy_lambda	square_codes_01.py	/^noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
noisy_lambda	square_codes_02.py	/^    noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
noisy_lambda	square_codes_02.py	/^noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
noisy_lambda	square_codes_03.py	/^    noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
noisy_lambda	square_codes_03.py	/^noisy_lambda = len_lambda + sigma_lambda * np.random.randn()$/;"	v
nresp	algos/rms_calc_01.py	/^nresp = response_i * response_v$/;"	v
nresp	algos/rms_calc_03.py	/^nresp = response_i * response_v$/;"	v
num	algos/Tfilter_sympy_01.py	/^num = [30600, 7727272727.27273]$/;"	v
num	algos/Tfilter_sympy_02.py	/^num = [30600, 7727272727.27273]$/;"	v
num	algos/dippolito_continuo_01.py	/^num = [441,1323]$/;"	v
num	algos/pole_zero_placement_02.py	/^num = (z - e**(1.0j*freqz1\/fs*2*pi)) * (z - e**(1.0j*-freqz1\/fs*2*pi)) * (z - e**(1.0j*freqz2\/fs*2*pi)) * (z - e**(1.0j*-freqz2\/fs*2*pi))$/;"	v
num	algos/pole_zero_placement_03.py	/^num = (z - r1*e**(1.0j*freqz1\/fs*2*pi)) * (z - r1*e**(1.0j*-freqz1\/fs*2*pi)) * (z - r2*e**(1.0j*freqz2\/fs*2*pi)) * (z - r2*e**(1.0j*-freqz2\/fs*2*pi))$/;"	v
num	algos/saw_01.py	/^num = [1.29e-16, 3.9e-11, 1]$/;"	v
num	algos/system_z01.py	/^num = Kt * z$/;"	v
numH	algos/saw_02.py	/^numH = [1.29e-16, 3.9e-11, 1]$/;"	v
numH	algos/saw_03.py	/^numH = [1.29e-16, 3.9e-11, 1]$/;"	v
numZ	algos/saw_02.py	/^numZ = [45263157.8947368, 13684210526315.8, 3.50877192982456e+23]$/;"	v
numZ	algos/saw_03.py	/^numZ = [34704347.826087, 7826086956521.74, 2.58031221777835e+26]$/;"	v
num_open	algos/dippolito_continuo_01.py	/^num_open = [441, 1323]$/;"	v
numd1	algos/Tfilter_sympy_01.py	/^numd1 = numd[0,:]$/;"	v
numd1	algos/Tfilter_sympy_02.py	/^numd1 = numd[0,:]$/;"	v
nv2	algos/rms_calc_01.py	/^nv2 = response_v**2$/;"	v
nv2	algos/rms_calc_03.py	/^nv2 = response_v**2$/;"	v
nv2	algos/rms_calc_04.py	/^nv2 = vt**2$/;"	v
nv3	algos/rms_calc_01.py	/^nv3 = nv2.sum()\/lenght$/;"	v
nv3	algos/rms_calc_03.py	/^nv3 = nv2.sum()\/lenght$/;"	v
nv3	algos/rms_calc_04.py	/^nv3 = nv2.sum()\/lenght$/;"	v
offset	square_codes_01.py	/^    offset = int(3*noisy_lambda)$/;"	v
offset	square_codes_01.py	/^offset = end_of_wait_bit$/;"	v
offset	square_codes_02.py	/^    offset = 3*noisy_lambda$/;"	v
offset	square_codes_02.py	/^offset = end_of_start_bit$/;"	v
offset	square_codes_03.py	/^    offset = 3*noisy_lambda$/;"	v
offset	square_codes_03.py	/^offset = end_of_start_bit$/;"	v
omega	algos/discrete_esay_control_lib_02.py	/^omega = np.arange(0.1, 6.28, 6.28\/1000)$/;"	v
omega	algos/discrete_esay_control_lib_03.py	/^omega = np.arange(100, 3.1415 \/ dt, 1)$/;"	v
omega	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^omega = np.arange(100, 3.1415 \/ dt, 1)$/;"	v
openl	algos/dippolito_continuo_01.py	/^openl = lti(num_open, den_open)$/;"	v
output_vect	MA_tc_2016_01.py	/^output_vect = np.zeros(1000);$/;"	v
p	algos/python_lowpass_demo.py	/^p=2.0*pi*10$/;"	v
p_returns	portfolio_from_quantopian.py	/^p_returns = np.dot(weights, mean_returns)$/;"	v
pact	algos/rms_calc_01.py	/^pact = nresp.sum()\/lenght$/;"	v
pact	algos/rms_calc_03.py	/^pact = nresp.sum()\/lenght$/;"	v
pact	algos/rms_calc_04.py	/^pact = power_instant.sum()\/lenght$/;"	v
pact	algos/rms_calc_imple01.py	/^pact = power_instant.sum()\/lenght$/;"	v
pact_ajust	algos/rms_calc_imple01.py	/^pact_ajust = pact * 2.064$/;"	v
pact_error	algos/rms_calc_04.py	/^pact_error = ((pact_teorico - pact) \/ pact_teorico) * 100$/;"	v
pact_error	algos/rms_calc_imple01.py	/^pact_error = ((pact_teorico - pact) \/ pact_teorico) * 100$/;"	v
pact_error_ajust	algos/rms_calc_imple01.py	/^pact_error_ajust = ((pact_teorico - pact_ajust) \/ pact_teorico) * 100$/;"	v
pact_teorico	algos/rms_calc_04.py	/^pact_teorico = (imax * vmax) \/ 2.0$/;"	v
pact_teorico	algos/rms_calc_imple01.py	/^pact_teorico = (imax * vmax) \/ 2.0$/;"	v
pactd	algos/rms_calc_imple01.py	/^pactd = np.int32(iacd * vt_rect3)$/;"	v
pactd	algos/rms_calc_imple01.py	/^pactd = pactd >> 8$/;"	v
pactd_2	algos/rms_calc_imple01.py	/^pactd_2 = pactd.sum() \/ lenght$/;"	v
pactd_2_ajust	algos/rms_calc_imple01.py	/^pactd_2_ajust = pactd_2 * 0.0453484$/;"	v
pactd_error_ajust	algos/rms_calc_imple01.py	/^pactd_error_ajust = ((pact_teorico - pactd_2_ajust) \/ pact_teorico) * 100$/;"	v
parts	EM_conductor_01.py	/^parts = 0$/;"	v
peak_c	magneto_paremeters_calculate.py	/^peak_c = (current_limit * 1.5) * 0.196 + 0.46       #convierto corriente max a tensi�n con 50% de margen$/;"	v
peak_c	magneto_paremeters_prototyping.py	/^peak_c = (current_limit * 1.5) * 0.196 + 0.46       #convierto corriente max a tensi�n con 50% de margen$/;"	v
peak_c_adc	magneto_paremeters_calculate.py	/^peak_c_adc = (peak_c) \/ 3.0 * 4095                  #valor pico permitido en ADC$/;"	v
peak_c_adc	magneto_paremeters_calculate.py	/^peak_c_adc = round(peak_c_adc, 0)$/;"	v
peak_c_adc	magneto_paremeters_prototyping.py	/^peak_c_adc = (peak_c) \/ 3.0 * 4095                  #valor pico permitido en ADC$/;"	v
peak_c_adc	magneto_paremeters_prototyping.py	/^peak_c_adc = round(peak_c_adc, 0)$/;"	v
period	magneto_paremeters_calculate.py	/^period = rising_time + maintenance_time + falling_time + stop_time$/;"	v
period	magneto_paremeters_prototyping.py	/^period = rising_time + maintenance_time + falling_time + stop_time$/;"	v
pf	algos/rms_calc_01.py	/^pf = pact \/ s$/;"	v
pf	algos/rms_calc_03.py	/^pf = pact \/ s$/;"	v
pf	algos/rms_calc_04.py	/^pf = pact \/ s$/;"	v
pilot_bits	MLE_on_code_detect.py	/^pilot_bits = 12$/;"	v
planta	algos/dippolito_continuo_01.py	/^planta = lti(1, den1)$/;"	v
poles	algos/PID_control_03_analog.py	/^poles = [0, 10000]$/;"	v
poles	algos/system_z01.py	/^poles = [-0.308035714285714]$/;"	v
port	algos/datalogger.py	/^port = 'COM20'$/;"	v
port	algos/serial_test.py	/^port = 'COM20'$/;"	v
port	algos/serial_test_thread.py	/^port = 'COM20'$/;"	v
power_instant	algos/rms_calc_04.py	/^power_instant = it * vt_rect2$/;"	v
power_instant	algos/rms_calc_imple01.py	/^power_instant = it * vt_rect2$/;"	v
primeras	METAB_fallas.py	/^primeras = 3$/;"	v
primeras	METAB_fallas2.py	/^primeras = 3$/;"	v
print_a_list	algos/pruebo_print.py	/^def print_a_list(a_list):$/;"	f
pwm_200_1	magneto_paremeters_calculate.py	/^	pwm_200_1 = voltage \/ FUENTE_200V$/;"	v
pwm_200_1	magneto_paremeters_prototyping.py	/^		pwm_200_1 = voltage \/ FUENTE_200V$/;"	v
pwm_200_2	magneto_paremeters_calculate.py	/^	pwm_200_2 = voltage2 \/ FUENTE_200V$/;"	v
pwm_200_2	magneto_paremeters_prototyping.py	/^		pwm_200_2 = voltage2 \/ FUENTE_200V$/;"	v
pwm_40	magneto_paremeters_calculate.py	/^	pwm_40 = voltage \/ FUENTE_40V$/;"	v
pwm_40	magneto_paremeters_prototyping.py	/^	pwm_40 = voltage \/ FUENTE_40V$/;"	v
pwm_40_1	magneto_paremeters_calculate.py	/^	pwm_40_1 = voltage \/ FUENTE_40V$/;"	v
pwm_40_1	magneto_paremeters_prototyping.py	/^		pwm_40_1 = 0.0$/;"	v
pwm_40_1	magneto_paremeters_prototyping.py	/^		pwm_40_1 = voltage \/ FUENTE_40V$/;"	v
pwm_40_2	magneto_paremeters_calculate.py	/^	pwm_40_2 = voltage2 \/ FUENTE_40V$/;"	v
pwm_40_2	magneto_paremeters_prototyping.py	/^		pwm_40_2 = voltage2 \/ FUENTE_40V$/;"	v
q	algos/rms_calc_01.py	/^q = s*sqrt(1-pf**2)$/;"	v
q	algos/rms_calc_03.py	/^q = s*sqrt(1-pf**2)$/;"	v
q	algos/rms_calc_04.py	/^q = s*sqrt(1-pf**2)$/;"	v
quartercycle	algos/vmax01.py	/^quartercycle = cyclesize \/ 4$/;"	v
r1	algos/pole_zero_placement_03.py	/^r1 = 0.97$/;"	v
r2	algos/pole_zero_placement_03.py	/^r2 = 0.97$/;"	v
rects1	pareto_chart.py	/^rects1 = ax1.bar(ind, defects, width=width) # draw the chart$/;"	v
res	algos/math_test_01.py	/^res = math.sqrt(9)$/;"	v
resistance	magneto_paremeters_calculate.py	/^resistance = 32$/;"	v
resistance	magneto_paremeters_prototyping.py	/^resistance = 3.0$/;"	v
resistance_discharge	magneto_paremeters_calculate.py	/^resistance_discharge = 1175.0$/;"	v
resistance_discharge	magneto_paremeters_prototyping.py	/^resistance_discharge = 1175.0$/;"	v
response	algos/rms_calc_02.py	/^response = signal.lfilter(b,a,it)$/;"	v
response_i	algos/rms_calc_01.py	/^response_i = signal.lfilter(b,a,it)$/;"	v
response_i	algos/rms_calc_03.py	/^response_i = signal.lfilter(b,a,it)$/;"	v
response_v	algos/rms_calc_01.py	/^response_v = signal.lfilter(b,a,vt)$/;"	v
response_v	algos/rms_calc_03.py	/^response_v = signal.lfilter(b,a,vt)$/;"	v
resto	algos/implementation_05_result_micro.py	/^            resto = acc & 0x00007FFF  #guardo los bits que voy a truncar                                                $/;"	v
resto	algos/implementation_05_result_micro.py	/^resto = 0$/;"	v
return_volatilities	portfolio_from_quantopian.py	/^return_volatilities = [np.std(R) for R in returns]$/;"	v
returns	portfolio_from_quantopian.py	/^returns = np.zeros((N, 100))$/;"	v
ri	algos/rms_calc_03.py	/^ri = np.arange(0, irms, 0.01)$/;"	v
rising_time	magneto_paremeters_calculate.py	/^rising_time = 3e-3$/;"	v
rising_time	magneto_paremeters_prototyping.py	/^rising_time = 3e-3$/;"	v
rp	algos/rms_calc_03.py	/^    rp = np.arange(0, (pact*-1), 0.01)$/;"	v
rp	algos/rms_calc_03.py	/^    rp = np.arange(0, pact, 0.01)$/;"	v
rq	algos/rms_calc_03.py	/^    rq = np.arange(0, (q*-1), 0.01)$/;"	v
rq	algos/rms_calc_03.py	/^    rq = np.arange(0, q, 0.01)$/;"	v
rs	algos/rms_calc_03.py	/^rs = np.arange(0, s, 0.01)$/;"	v
rv	algos/rms_calc_03.py	/^rv = np.arange(0, vrms, 0.01)$/;"	v
s	algos/PID_control_01.py	/^s = Symbol('s')$/;"	v
s	algos/PID_control_02.py	/^s=2.0j*pi*f$/;"	v
s	algos/Tfilter_sympy_01.py	/^s = Symbol('s')$/;"	v
s	algos/dippolito_continuo_01.py	/^s = Symbol('s')$/;"	v
s	algos/python_lowpass_demo.py	/^s=2.0j*pi*f$/;"	v
s	algos/rms_calc_01.py	/^s = irms * vrms$/;"	v
s	algos/rms_calc_03.py	/^s = irms * vrms$/;"	v
s	algos/rms_calc_04.py	/^s = irms * vrms$/;"	v
s	algos/saw_01.py	/^s = Symbol('s')$/;"	v
s	algos/saw_02.py	/^s = Symbol('s')$/;"	v
s	algos/saw_03.py	/^s = Symbol('s')$/;"	v
s	algos/sympy_test_03.py	/^s = Symbol('s')$/;"	v
salida_armado	METAB_fallas.py	/^salida_armado = 2$/;"	v
salida_armado	METAB_fallas2.py	/^salida_armado = 2$/;"	v
salida_manipuleo	METAB_fallas.py	/^salida_manipuleo = 4$/;"	v
salida_manipuleo	METAB_fallas2.py	/^salida_manipuleo = 4$/;"	v
salida_umal	METAB_fallas.py	/^salida_umal = 8$/;"	v
salida_umal	METAB_fallas2.py	/^salida_umal = 8$/;"	v
saw	algos/saw_01.py	/^saw = lti(num, den)$/;"	v
sawH	algos/saw_02.py	/^sawH = lti(numH, denH)$/;"	v
sawH	algos/saw_03.py	/^sawH = lti(numH, denH)$/;"	v
sawZ	algos/saw_02.py	/^sawZ = lti(numZ, denZ)$/;"	v
sawZ	algos/saw_03.py	/^sawZ = lti(numZ, denZ)$/;"	v
segundas	METAB_fallas.py	/^segundas = 19$/;"	v
segundas	METAB_fallas2.py	/^segundas = 19$/;"	v
serial_string	algos/datalogger.py	/^serial_string = ""$/;"	v
sharpe	sharpe.py	/^def sharpe(returns, rf, days=252):$/;"	f
sigma_lambda	square_codes_01.py	/^sigma_lambda = 30$/;"	v
sigma_lambda	square_codes_02.py	/^sigma_lambda = 30$/;"	v
sigma_lambda	square_codes_03.py	/^sigma_lambda = 30$/;"	v
signal	square_codes_01.py	/^signal = np.zeros_like(t)$/;"	v
signal	square_codes_02.py	/^signal = np.zeros_like(t)$/;"	v
signal	square_codes_03.py	/^signal = np.zeros_like(t)$/;"	v
signaln	square_codes_01.py	/^signaln = np.zeros_like(t)$/;"	v
signaln	square_codes_02.py	/^signaln = np.zeros_like(t)$/;"	v
signaln	square_codes_03.py	/^signaln = np.zeros_like(t)$/;"	v
solution_iso	EM_single_layer.py	/^solution_iso = tm.solve(wls)$/;"	v
solver	EM_fully_vect.py	/^solver = EMpy.modesolvers.FD.VFDModeSolver(wl, x, y, epsfunc, boundary).solve($/;"	v
sp	algos/PID_solo_KP_pulsos.py	/^sp = np.ones (1000)$/;"	v
sp	algos/PID_solo_KP_pulsos.py	/^sp = sp * 80$/;"	v
start	Stocks/pandas_pdr.py	/^start = datetime.datetime(2017,7,5)$/;"	v
start2	Stocks/pandas_pdr.py	/^		start2 = start - tdelta$/;"	v
start_time	algos/datalogger.py	/^start_time = time.time()$/;"	v
stepResponse	algos/mat.py	/^def stepResponse(Ts,*args,**kwargs):$/;"	f
stop_time	magneto_paremeters_calculate.py	/^stop_time = 6e-3$/;"	v
stop_time	magneto_paremeters_prototyping.py	/^stop_time = 6e-3$/;"	v
sys_new	algos/PID_control_07_pole_two_zero.py	/^sys_new = tf(b, a, True)$/;"	v
sys_new	algos/PID_control_boost_dc_dc_01.py	/^sys_new = tf(b, a, True)$/;"	v
system	algos/system_z01.py	/^system = num \/ den$/;"	v
t	algos/PID_solo_KP_pulsos.py	/^t = np.arange (0, np.size(sp), 1)$/;"	v
t	algos/data_read_example.py	/^t=data[:,0]#t is the first column (column 0)$/;"	v
t	algos/implementatio_01.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/implementation_02.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/implementation_03.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/implementation_04.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/implementation_05_result_micro.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/max_error.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/rms_calc_01.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/rms_calc_02.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/rms_calc_03.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/rms_calc_04.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/rms_calc_imple01.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	algos/system_z01.py	/^t = np.arange (0, 100, 1)$/;"	v
t	algos/vmax01.py	/^t = np.arange (0, length)$/;"	v
t	current_graph_01.py	/^t = np.arange(0, t_graph, t_graph \/ 1000.0)$/;"	v
t	max_error.py	/^t = np.arange (0, lenght * Ts, Ts)$/;"	v
t	medidor_Irms_placa_redonda02.py	/^t = np.arange(0, length * tstep, tstep)$/;"	v
t	square_codes_01.py	/^t = np.arange(0, 30, tstep)$/;"	v
t	square_codes_02.py	/^t = np.arange(0, 30, tstep)$/;"	v
t	square_codes_03.py	/^t = np.arange(0, 30, tstep)$/;"	v
t2	algos/discrete_esay_control_lib_02.py	/^t2 = T[0, :]$/;"	v
t2	square_codes_03.py	/^t2 = np.arange (0, 60, tstep)$/;"	v
t_graph	current_graph_01.py	/^t_graph = 10e-3$/;"	v
t_in	algos/discrete_esay_02.py	/^t_in = [0.0, 1.0, 2.0, 3.0]$/;"	v
t_in	algos/discrete_esay_03.py	/^t_in = [0.0, 1.0, 2.0, 3.0]$/;"	v
t_in	algos/discrete_esay_control_lib_01.py	/^t_in = np.arange(0.0, 0.1, 0.001)$/;"	v
t_rise	current_graph_01.py	/^t_rise = 3e-3$/;"	v
tau_discharge	magneto_paremeters_calculate.py	/^tau_discharge = 0.1175 				#RC$/;"	v
tau_discharge	magneto_paremeters_prototyping.py	/^tau_discharge = 0.1175 				#RC$/;"	v
tdelta	Stocks/pandas_pdr.py	/^tdelta = datetime.timedelta(days=2)$/;"	v
tf	algos/discrete_esay_02.py	/^tf = (b, [1.0], 1.0)$/;"	v
tf	algos/discrete_esay_03.py	/^tf = (b, [1.0], 1.0)$/;"	v
tf	algos/discrete_esay_control_lib_01.py	/^tf = (b, [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0.001)   #ver que dt coincida con el step de tiempo en discreto$/;"	v
tf	algos/python_lowpass_demo.py	/^tf=p\/(s+p)$/;"	v
tf1	algos/discrete_esay_control_lib_01.py	/^tf1 = (b, [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0.001)   #ver que dt coincida con el step de tiempo en discreto$/;"	v
the_cumsum	METAB_fallas.py	/^the_cumsum = np.cumsum(freq_fallas) #  32, 32 + 22, 32 + 22 + 15, 32 + 22 + 15 + 5, 32 + 22, + 15 + 5 + 2$/;"	v
the_cumsum	METAB_fallas2.py	/^the_cumsum = np.cumsum(freq_fallas) #  32, 32 + 22, 32 + 22 + 15, 32 + 22 + 15 + 5, 32 + 22, + 15 + 5 + 2$/;"	v
the_cumsum	pareto_chart.py	/^the_cumsum = np.cumsum(defects) #  32, 32 + 22, 32 + 22 + 15, 32 + 22 + 15 + 5, 32 + 22, + 15 + 5 + 2$/;"	v
the_sum	METAB_fallas.py	/^the_sum = sum(freq_fallas) # ie, 32 + 22 + 15 + 5 + 2$/;"	v
the_sum	METAB_fallas2.py	/^the_sum = sum(freq_fallas) # ie, 32 + 22 + 15 + 5 + 2$/;"	v
the_sum	pareto_chart.py	/^the_sum = sum(defects) # ie, 32 + 22 + 15 + 5 + 2$/;"	v
theta_i	algos/rms_calc_03.py	/^theta_i = pi\/2.0$/;"	v
theta_i	algos/rms_calc_04.py	/^theta_i = 0$/;"	v
theta_i	algos/rms_calc_imple01.py	/^theta_i = 0$/;"	v
theta_ii	algos/rms_calc_03.py	/^theta_ii = np.ones(ri.size)$/;"	v
theta_inc	EM_single_layer.py	/^theta_inc = EMpy.utils.deg2rad(10.)$/;"	v
theta_p	algos/rms_calc_03.py	/^    theta_p = np.ones(rp.size)$/;"	v
theta_q	algos/rms_calc_03.py	/^    theta_q = np.ones(rq.size)    $/;"	v
theta_q	algos/rms_calc_03.py	/^    theta_q = np.ones(rq.size)$/;"	v
theta_s	algos/rms_calc_03.py	/^theta_s = np.ones(rs.size)$/;"	v
theta_v	algos/rms_calc_03.py	/^theta_v = 0.0$/;"	v
theta_v	algos/rms_calc_04.py	/^theta_v = 0.0$/;"	v
theta_v	algos/rms_calc_imple01.py	/^theta_v = pi\/8.0$/;"	v
theta_vv	algos/rms_calc_03.py	/^theta_vv = np.ones(rv.size)$/;"	v
three_noisy_lambda	square_codes_01.py	/^	three_noisy_lambda= int (3 * noisy_lambda)$/;"	v
tin	algos/discrete_esay_control_lib_03.py	/^tin = np.arange(0.0, 0.005, 0.0001)$/;"	v
tin	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^tin = np.arange(0.0, 0.005, 0.0001)$/;"	v
tlambda	square_codes_01.py	/^tlambda = 330 * tstep #330us$/;"	v
tlambda	square_codes_02.py	/^tlambda = len_lambda * tstep #330us$/;"	v
tlambda	square_codes_03.py	/^tlambda = len_lambda * tstep #330us$/;"	v
tm	EM_single_layer.py	/^tm = EMpy.transfer_matrix.IsotropicTransferMatrix(iso_layers, theta_inc)$/;"	v
tol	EM_fully_vect.py	/^tol = 1e-8$/;"	v
total_salidas	METAB_fallas.py	/^total_salidas = primeras + 11$/;"	v
total_salidas	METAB_fallas2.py	/^total_salidas = primeras + 11$/;"	v
tr	square_codes_02.py	/^tr = LookForTransitions(signaln)$/;"	v
tr	square_codes_03.py	/^tr = LookForTransitions(t2, vapp)$/;"	v
transitions	MLE_on_code_detect.py	/^transitions = clks * 2.0$/;"	v
tstep	medidor_Irms_placa_redonda02.py	/^tstep = 1.0 \/ 15600		#frecuencia y tiempo de muestreo$/;"	v
tstep	square_codes_01.py	/^tstep = 0.001   #en ms, 1us$/;"	v
tstep	square_codes_02.py	/^tstep = 0.001   #en ms, 1us$/;"	v
tstep	square_codes_03.py	/^tstep = 0.001   #en ms, 1us$/;"	v
two_noisy_lambda	square_codes_01.py	/^	two_noisy_lambda = int (2 * noisy_lambda)$/;"	v
u	algos/discrete_esay_02.py	/^u = np.asarray([0.0, 0.0, 1.0, 1.0])$/;"	v
u	algos/discrete_esay_03.py	/^u = np.asarray([0.0, 0.0, 1.0, 1.0])$/;"	v
u	algos/discrete_esay_control_lib_01.py	/^u = np.ones(np.size(t_in))$/;"	v
u	algos/plot_zplane.py	/^    u = 1.0*(index==0)$/;"	v
umal	METAB_fallas.py	/^umal = 13$/;"	v
umal	METAB_fallas2.py	/^umal = 13$/;"	v
update_all_tickers	Stocks/get_tickers.py	/^def update_all_tickers (df):$/;"	f
update_ax2	pareto_chart.py	/^def update_ax2(axx):$/;"	f
update_single_ticker	Stocks/get_tickers.py	/^def update_single_ticker (t_name):$/;"	f
vapp	square_codes_03.py	/^vapp = np.zeros(signal.size + signaln.size)$/;"	v
var_p	portfolio_from_quantopian.py	/^var_p = np.dot(np.dot(weights, cov_mat), weights.T)$/;"	v
vin	algos/implementatio_01.py	/^vin = 2047 * sin(2*pi*fo*t) + 2048   #max excursion en el ADC$/;"	v
vin	algos/implementation_02.py	/^vin = 2047 * sin(2*pi*fo*t) + 2048   #max excursion en el ADC$/;"	v
vin	algos/implementation_03.py	/^vin = 2047 * sin(2*pi*fo*t) + 2048  #max excursion en el ADC OFFSET -50 (con correccion de continua += 369)$/;"	v
vin	algos/implementation_04.py	/^vin = 2047 * sin(2*pi*fo*t) + 2048  #max excursion en el ADC OFFSET -50 (con correccion de continua += 369)$/;"	v
vin	algos/implementation_05_result_micro.py	/^vin = 2047 * sin(2*pi*fo*t) + 2048  #max excursion en el ADC OFFSET -50 (con correccion de continua += 369)$/;"	v
vin_int	algos/implementatio_01.py	/^vin_int = np.asanyarray(vin, 'int16') #paso de float a int16$/;"	v
vin_int	algos/implementation_02.py	/^vin_int = np.asanyarray(vin, 'int16') #paso de float a int16$/;"	v
vin_int	algos/implementation_03.py	/^vin_int = np.asanyarray(vin, 'int16') #paso de float a int16$/;"	v
vin_int	algos/implementation_04.py	/^vin_int = np.asanyarray(vin, 'int16') #paso de float a int16$/;"	v
vin_int	algos/implementation_05_result_micro.py	/^vin_int = np.asanyarray(vin, 'int16') #paso de float a int16$/;"	v
vmax	algos/rms_calc_01.py	/^vmax = 1$/;"	v
vmax	algos/rms_calc_02.py	/^vmax = 1$/;"	v
vmax	algos/rms_calc_03.py	/^vmax = 1$/;"	v
vmax	algos/rms_calc_04.py	/^vmax = 1$/;"	v
vmax	algos/rms_calc_imple01.py	/^vmax = 312$/;"	v
vmax	algos/vmax01.py	/^        vmax = vsense[i]$/;"	v
vmax	algos/vmax01.py	/^vmax = 0$/;"	v
vmin	algos/vmax01.py	/^        vmin = vsense[i]$/;"	v
vmin	algos/vmax01.py	/^vmin = 0$/;"	v
vol_p	portfolio_from_quantopian.py	/^vol_p = np.sqrt(var_p)$/;"	v
voltage	magneto_paremeters_calculate.py	/^voltage = (current_limit * inductance \/ rising_time)$/;"	v
voltage	magneto_paremeters_calculate.py	/^voltage = resistance * current_limit$/;"	v
voltage	magneto_paremeters_prototyping.py	/^voltage = (current_limit * inductance \/ rising_time) * 2.0$/;"	v
voltage	magneto_paremeters_prototyping.py	/^voltage = resistance * current_limit$/;"	v
voltage2	magneto_paremeters_calculate.py	/^voltage2 = voltage + current_limit * resistance$/;"	v
voltage2	magneto_paremeters_prototyping.py	/^voltage2 = current_limit * resistance$/;"	v
voltageRL	magneto_paremeters_calculate.py	/^voltageRL = current_limit * resistance * math.sqrt(falling_time \/ (3.0 * period))$/;"	v
voltageRL	magneto_paremeters_prototyping.py	/^voltageRL = current_limit * resistance * math.sqrt(falling_time \/ (3.0 * period))$/;"	v
vout	algos/implementatio_01.py	/^vout = np.ones(lenght)$/;"	v
vout	algos/implementation_02.py	/^vout = np.ones(lenght)$/;"	v
vout	algos/implementation_03.py	/^vout = np.ones(lenght)$/;"	v
vout	algos/implementation_04.py	/^vout = np.ones(lenght)$/;"	v
vout	algos/implementation_05_result_micro.py	/^vout = np.ones(lenght)$/;"	v
vout_int	algos/implementation_03.py	/^vout_int = np.ones(lenght, 'int32')$/;"	v
vout_int	algos/implementation_04.py	/^vout_int = np.ones(lenght, 'int32')$/;"	v
vout_int	algos/implementation_05_result_micro.py	/^vout_int = np.ones(lenght, 'int16')     #cambio a int16$/;"	v
vpp	medidor_Irms_placa_redonda.py	/^vpp = np.asarray([1.12, 1.72, 2.44, 3.12])$/;"	v
vrms	algos/rms_calc_01.py	/^vrms = sqrt(nv3)$/;"	v
vrms	algos/rms_calc_03.py	/^vrms = sqrt(nv3)$/;"	v
vrms	algos/rms_calc_04.py	/^vrms = sqrt(nv3)$/;"	v
vsense	algos/vmax01.py	/^vsense = np.zeros(length)$/;"	v
vt	algos/rms_calc_01.py	/^vt = vmax * sin(2*pi*50*t)$/;"	v
vt	algos/rms_calc_02.py	/^vt = vmax * sin(2*pi*50*t)$/;"	v
vt	algos/rms_calc_03.py	/^vt = vmax * sin(2*pi*50*t+theta_v)$/;"	v
vt	algos/rms_calc_04.py	/^vt = vmax * sin(2*pi*freq*t+theta_v)$/;"	v
vt	algos/rms_calc_imple01.py	/^vt = 1 * sin(2*pi*freq*t+theta_v)$/;"	v
vt_rect1	algos/rms_calc_04.py	/^vt_rect1 = (vt - 0.1) * 1.11$/;"	v
vt_rect1	algos/rms_calc_imple01.py	/^vt_rect1 = (vt - 0.1) * 1.11$/;"	v
vt_rect2	algos/rms_calc_04.py	/^vt_rect2 = np.where(vt_rect1 < 0, 0, vt_rect1)$/;"	v
vt_rect2	algos/rms_calc_imple01.py	/^vt_rect2 = np.where(vt_rect1 < 0, 0, vt_rect1)$/;"	v
vt_rect2	algos/rms_calc_imple01.py	/^vt_rect2 = vt_rect2 * vmax$/;"	v
vt_rect3	algos/rms_calc_imple01.py	/^vt_rect3 = np.uint16((vt_rect2 \/ 360.0) * 4095)$/;"	v
weights	portfolio_from_quantopian.py	/^weights = np.random.uniform(0, 1, N)$/;"	v
weights	portfolio_from_quantopian.py	/^weights = weights\/np.sum(weights)$/;"	v
wi	medidor_Irms_placa_redonda02.py	/^wi = 2 * np.pi * freq_i$/;"	v
width	pareto_chart.py	/^width = .98 # with do of the bars, where a width of 1 indidcates no space between bars$/;"	v
wl	EM_fully_vect.py	/^wl = 1.55e-6$/;"	v
wls	EM_n_rings_resonator.py	/^wls = numpy.linspace(1.53e-6, 1.57e-6, 1000)$/;"	v
wls	EM_single_layer.py	/^wls = numpy.linspace(0.85e-6, 2.25e-6, 300)$/;"	v
wp	algos/rms_calc_01.py	/^wp = fpass \/ fsample$/;"	v
wp	algos/rms_calc_02.py	/^wp = fpass \/ fsample$/;"	v
wp	algos/rms_calc_03.py	/^wp = fpass \/ fsample$/;"	v
ws	algos/rms_calc_01.py	/^ws = fstop \/ fsample$/;"	v
ws	algos/rms_calc_02.py	/^ws = fstop \/ fsample$/;"	v
ws	algos/rms_calc_03.py	/^ws = fstop \/ fsample$/;"	v
x	EM_conductor_01.py	/^x = range(xwidth)$/;"	v
x	EM_fully_vect.py	/^x = numpy.linspace(0, 2.48e-6, 125)$/;"	v
x	METAB_fallas.py	/^x = [1.4,2.4,3.4]$/;"	v
x	METAB_fallas2.py	/^x = [1.4,2.4,3.4]$/;"	v
x	algos/matplot.py	/^x = np.linspace(0, 10, 200)$/;"	v
x	algos/max_error.py	/^x = arange(0,20)$/;"	v
x	max_error.py	/^x = arange(0,20)$/;"	v
x	pareto_chart.py	/^x = ind + .5 * width # find the middle of the bar$/;"	v
x1	algos/subplot.py	/^x1 = np.linspace(0.0, 5.0)$/;"	v
x2	algos/subplot.py	/^x2 = np.linspace(0.0, 2.0)$/;"	v
x_vals	square_codes_01.py	/^x_vals = range(N)$/;"	v
x_vals	square_codes_02.py	/^x_vals = range(N)$/;"	v
x_vals	square_codes_03.py	/^x_vals = range(N)$/;"	v
x_vals	square_wave_vector.py	/^x_vals = range(N)$/;"	v
xwidth	EM_conductor_01.py	/^xwidth = 26$/;"	v
y	EM_conductor_01.py	/^y = range(ywidth)$/;"	v
y	EM_fully_vect.py	/^y = numpy.linspace(0, 2.22e-6, 112)$/;"	v
y	algos/data_read_example.py	/^y=data[:,1]#y is the second column (column 1)$/;"	v
y	algos/matplot.py	/^y = np.sin(x)$/;"	v
y	algos/plot_zplane.py	/^    y = lfilter(b, a, u)$/;"	v
y1	algos/subplot.py	/^y1 = np.cos(2 * np.pi * x1) * np.exp(-x1)$/;"	v
y2	algos/subplot.py	/^y2 = np.cos(2 * np.pi * x2)$/;"	v
y_out	algos/Tfilter_sympy_02.py	/^y_out = yout[0]$/;"	v
yout	algos/discrete_esay_control_lib_03.py	/^yout = yout0[:Tout.size]$/;"	v
yout	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^yout = yout0[:Tout.size]$/;"	v
yout	algos/system_z01.py	/^yout = yout0[:tout.size]$/;"	v
yout0	algos/discrete_esay_control_lib_03.py	/^yout0 = yout1[0]$/;"	v
yout0	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^yout0 = yout1[0]$/;"	v
yout0	algos/system_z01.py	/^yout0 = yout1[0]$/;"	v
yout1	algos/discrete_esay_control_lib_03.py	/^yout1 = np.transpose(yout2)$/;"	v
yout1	algos/discrete_esay_control_lib_04_con_ALPHA.py	/^yout1 = np.transpose(yout2)$/;"	v
yout1	algos/system_z01.py	/^yout1 = np.transpose(yout)$/;"	v
ywidth	EM_conductor_01.py	/^ywidth = 26$/;"	v
z	EM_conductor_01.py	/^z = 1$/;"	v
z	EM_conductor_01.py	/^z = bmatrix[x][y].T$/;"	v
z	algos/PID_analog_to_PID_digital.py	/^z = Symbol('z')$/;"	v
z	algos/pole_zero_placement_02.py	/^z = Symbol('z')$/;"	v
z	algos/pole_zero_placement_03.py	/^z = Symbol('z')$/;"	v
z	algos/pole_zero_placement_04.py	/^z = Symbol('z')$/;"	v
z	algos/pruebo_print.py	/^z = 1 \/ 3$/;"	v
z	algos/system_z01.py	/^z = Symbol('z')$/;"	v
zero_current	algos/rms_calc_imple01.py	/^zero_current = 2048$/;"	v
zeroes	algos/system_z01.py	/^zeroes = [0]$/;"	v
zeros	algos/PID_control_03_analog.py	/^zeros = [100, 1000]$/;"	v
zplane	algos/plot_zplane.py	/^def zplane(z, p, filename=None):$/;"	f
zplane	algos/plot_zplane2.py	/^def zplane(b,a,filename=None):$/;"	f
